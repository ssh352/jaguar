package main

import (
	"github.com/Workiva/go-datastructures/queue"
	zmq "github.com/pebbe/zmq3"
	log "github.com/thinkboy/log4go"
	"github.com/vmihailenco/msgpack"
	"github.com/widuu/goini"
	"os"
	emsbase "quant/emsmodule/base"
	rms "quant/rmsmodule"
	"quant/util"
)

var (
	// Conf is emsmodule configure file
	Conf *goini.Config
)

func init() {
	log.LoadConfiguration(quantutil.QuantLogConfigFile)
	Conf = goini.SetConfig(quantutil.QuantConfigFile)
}

type emsModule struct {
	receiveAddr   string
	emsModulePull *zmq.Socket
	portqueue     *queue.RingBuffer
	algorithm     AlgorithmAdmin
	running       bool
}

func (ems *emsModule) init() {
	ems.running = false
	ems.receiveAddr = Conf.GetStr("emsmodule", "pull_addr")
	ems.portqueue = queue.NewRingBuffer(10000)
	ems.algorithm = AlgorithmAdmin{ems.portqueue}
	ems.algorithm.init()
	ems.connect()
	go ems.algorithm.Run()
}

func (ems *emsModule) connect() {
	log.Info("EMS listen to %s", ems.receiveAddr)
	var err error
	ems.emsModulePull, err = zmq.NewSocket(zmq.PULL)
	if err != nil {
		log.Error("EMS create zmq pull failed.")
		os.Exit(-1)
	}
	err = ems.emsModulePull.Bind(ems.receiveAddr)
	if err != nil {
		log.Error("EMS create zmq pull bind failed. Addr: %s", ems.receiveAddr)
		os.Exit(-1)
	}
}

func (ems *emsModule) release() {
	ems.emsModulePull.Close()
}

func (ems *emsModule) stop() {
	ems.running = false
}

func (ems *emsModule) run(wc chan int) {
	ems.running = true
	for ems.running {
		data, _ := ems.emsModulePull.Recv(0)
		var port emsbase.Portfolio
		err := msgpack.Unmarshal([]byte(data), &port)
		if err != nil {
			log.Error("EMS msgpack unmarshal portfolio failed.")
		} else {
			if Isvaild, _ := rms.CheckPort(&port); Isvaild {
				log.Info("%v", port)
				// arithmetic trade
				ems.portqueue.Put(port)
			}
		}
	}
	wc <- 0
}

func main() {
	log.Info("EMS Start")
	ems := new(emsModule)
	ems.init()
	wc := make(chan int)
	go ems.run(wc)
	<-wc
	ems.release()
	log.Info("EMS Exit")
}
