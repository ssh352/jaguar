package sbase

import (
	zmq "github.com/pebbe/zmq3"
	log "github.com/thinkboy/log4go"
	"github.com/widuu/goini"
	"strings"
)

type Sbase struct {
	StrategyName     string
	StockAccount     string
	FutureAccount    string
	CombiNo          string
	SubQuoteCodes    string   //subscribe qoute id, example 000001.SZ|600000.SH
	SubQuoteCodesArr []string //subscribe qoute id, example arr[0] = 000001.SZ, arr[1] = 600000.SH

	HqModulePublishAddr  string //zmq pub/sub
	OMSModulePublishAddr string //zmq pub/sub
	OMSModuleQueryAddr   string //zmq req/rep
	EMSModuleAddr        string //zmq pull/push

	HqModuleSub   *zmq.Socket
	OmsModuleSub  *zmq.Socket
	OmsModuleRep  *zmq.Socket
	EmsModulePush *zmq.Socket
}

func (sb *Sbase) Init() {
	sb.InitConfig()
	sb.SubQuote()
	sb.ConnectToEMS()
	sb.SubResp()
	sb.ConnectToOMS()
}

func (sb *Sbase) InitConfig() {
	log.Info("Strategy %s init config. Loding ./conf/quant.ini", sb.StrategyName)
	conf := goini.SetConfig("./conf/quant.ini")
	sb.HqModulePublishAddr = conf.GetValue("hqmodule", "publish_addr")
	sb.OMSModulePublishAddr = conf.GetValue("omsmodule", "publish_addr")
	sb.OMSModuleQueryAddr = conf.GetValue("omsmodule", "req_addr")
	sb.EMSModuleAddr = conf.GetValue("emsmodule", "pull_addr")
}

func (sb *Sbase) SubQuote() {
	log.Info("Strategy %s subscribe quote: %s", sb.StrategyName, sb.HqModulePublishAddr)
	sb.HqModuleSub, _ = zmq.NewSocket(zmq.SUB)
	sb.HqModuleSub.Connect(sb.HqModulePublishAddr)
	sb.SetSubQuote()
}

func (sb *Sbase) SetSubQuote() {
	sb.SubQuoteCodesArr = strings.Split(sb.SubQuoteCodes, "|")
	for _, filter := range sb.SubQuoteCodesArr {
		log.Info("Strategy %s subscribe: %s", sb.StrategyName, filter)
		sb.HqModuleSub.SetSubscribe(filter)
	}
}

func (sb *Sbase) ConnectToEMS() {
	log.Info("Strategy %s connect to ems: %s", sb.StrategyName, sb.EMSModuleAddr)
	sb.EmsModulePush, _ = zmq.NewSocket(zmq.PUSH)
	sb.EmsModulePush.Connect(sb.EMSModuleAddr)
}

func (sb *Sbase) SubResp() {
	log.Info("Strategy %s subscribe oms: %s", sb.StrategyName, sb.OMSModulePublishAddr)
	sb.OmsModuleSub, _ = zmq.NewSocket(zmq.SUB)
	sb.OmsModuleSub.Connect(sb.OMSModulePublishAddr)
}

func (sb *Sbase) ConnectToOMS() {
	log.Info("Strategy %s connect to oms: %s", sb.StrategyName, sb.OMSModuleQueryAddr)
	sb.OmsModuleRep, _ = zmq.NewSocket(zmq.REQ)
	sb.OmsModuleRep.Connect(sb.OMSModuleQueryAddr)
}

func (sb *Sbase) Release() {
	defer sb.HqModuleSub.Close()
	defer sb.EmsModulePush.Close()
	defer sb.OmsModuleSub.Close()
	defer sb.OmsModuleRep.Close()
}
