package main

import (
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"
	"math"
	"sync"
	"time"
	"hash/adler32"

	"github.com/Workiva/go-datastructures/queue"
	//zmq "github.com/vaughan0/go-zmq"
	zmq "github.com/pebbe/zmq3"
	log "github.com/thinkboy/log4go"
)

const (
	VERSION = "0.1"
)

var _ = bytes.ErrTooLarge
var _ sync.WaitGroup
var _ = math.Sqrt2

var (
	rbmd001map    *queue.RingBuffer
	rbmd002map    *queue.RingBuffer
	rbmd004map    *queue.RingBuffer
	rbmd001reduce *queue.RingBuffer
	rbmd002reduce *queue.RingBuffer
	rbmd004reduce *queue.RingBuffer
	rbreduce      *queue.RingBuffer
	rbmd001notify *queue.RingBuffer
	rbmd002notify *queue.RingBuffer
	rbmd004notify *queue.RingBuffer
	
	hashValueMap map[string]uint32

	tstart time.Time
)

func readfile(){

	for {
		fd, _ := ioutil.ReadFile(Conf.FileName)
		l := len(fd) - 11
		md001 := 0
		md002 := 0
		md004 := 0
		tstart = time.Now()
		for i := 0; i < l; i++ {
			if fd[i] == 0x0A {
				if fd[i+5] == 0x33 {
					i += 399
					continue
				} else if fd[i+5] == 0x31 {
					//判断和上次行情的哈希值是否相等
					code := string(fd[i+7:i+13])
					
					oldValue, ok := hashValueMap[code]
					if(ok){
						value := adler32.Checksum(fd[i+7 : i+150])
						if value == oldValue {
							continue
						}
						hashValueMap[code] = value
					}else{
						value := adler32.Checksum(fd[i+7 : i+150])
						hashValueMap[code] = value
					}
					
					md001++
					rbmd001map.Put(fd[i+7 : i+150])
					i += 149
				} else if fd[i+5] == 0x32 {
					//判断和上次行情的哈希值是否相等
					code := string(fd[i+7:i+13])
					
					oldValue, ok := hashValueMap[code]
					if(ok){
						value := adler32.Checksum(fd[i+7 : i+400])
						if value == oldValue {
							continue
						}
						hashValueMap[code] = value
					}else{
						value := adler32.Checksum(fd[i+7 : i+400])
						hashValueMap[code] = value
					}
					
					md002++
					rbmd002map.Put(fd[i+7 : i+400])
					i += 399
				} else if fd[i+5] == 0x34 {
					//判断和上次行情的哈希值是否相等
					code := string(fd[i+7:i+13])
					
					oldValue, ok := hashValueMap[code]
					if(ok){
						value := adler32.Checksum(fd[i+7 : i+424])
						if value == oldValue {
							continue
						}
						hashValueMap[code] = value
					}else{
						value := adler32.Checksum(fd[i+7 : i+424])
						hashValueMap[code] = value
					}
					
					md004++
					rbmd004map.Put(fd[i+7 : i+424])
					i += 423
				} else {
					//fmt.Println("error")
				}
				
			}
			
		}
//		rbmd001notify.Put(md001)
//		rbmd002notify.Put(md002)
//		rbmd004notify.Put(md004)
//		return fd
//		fmt.Printf("num:md001=%d,md002=%d,md004=%d\n", md001, md002, md004)
		log.Info("need to deal num:md001=%d,md002=%d,md004=%d", md001, md002, md004)
//		fmt.Printf("read file interval:%d", Conf.ReadFileInterval)
		time.Sleep(time.Duration(Conf.ReadFileInterval) * time.Second)
	}
}

func md001map() {
	//	for i := 0; i < 100; i++ {
	//		go func() {
	//			msg, _ := rbmd001map.Get()
	//			rbmd001reduce.Put(msg)
	//		}()
	//	}
	for i := 0; i < Conf.MaxProc; i++ {
		go func(seq int) {
			count := 0
			fmt.Println("start ", seq)
			tt1 := time.Now()
			for {
				count++
				msg, _ := rbmd001map.Get()
				b := msg.([]byte)
				code := make([]byte, 6)
				copy(code, b[0:6])
				
				var volume int64
				volume = 0
				for i := 0; i < 16; i++ {
					if b[16+i] == 49 {
						volume += powb(10, 15-i)
					} else if b[16+i] == 50 {
						volume += 2 * powb(10, 15-i)
					} else if b[16+i] == 51 {
						volume += 3 * powb(10, 15-i)
					} else if b[16+i] == 52 {
						volume += 4 * powb(10, 15-i)
					} else if b[16+i] == 53 {
						volume += 5 * powb(10, 15-i)
					} else if b[16+i] == 54 {
						volume += 6 * powb(10, 15-i)
					} else if b[16+i] == 55 {
						volume += 7 * powb(10, 15-i)
					} else if b[16+i] == 56 {
						volume += 8 * powb(10, 15-i)
					} else if b[16+i] == 57 {
						volume += 9 * powb(10, 15-i)
					} else {
					}
				}
				var amount1 int64
				amount1 = 0
				for i := 0; i < 15; i++ {
					if i == 14 || i == 13 {
						continue
					}
					if b[33+i] == 49 {
						amount1 += powb(10, 14-i)
					} else if b[33+i] == 50 {
						amount1 += 2 * powb(10, 14-i)
					} else if b[33+i] == 51 {
						amount1 += 3 * powb(10, 14-i)
					} else if b[33+i] == 52 {
						amount1 += 4 * powb(10, 14-i)
					} else if b[33+i] == 53 {
						amount1 += 5 * powb(10, 14-i)
					} else if b[33+i] == 54 {
						amount1 += 6 * powb(10, 14-i)
					} else if b[33+i] == 55 {
						amount1 += 7 * powb(10, 14-i)
					} else if b[33+i] == 56 {
						amount1 += 8 * powb(10, 14-i)
					} else if b[33+i] == 57 {
						amount1 += 9 * powb(10, 14-i)
					} else {
					}
				}

				for i := 0; i < 2; i++ {
					if b[47+i] == 49 {
						amount1 += powb(10, 1-i)
					} else if b[47+i] == 50 {
						amount1 += 2 * powb(10, 1-i)
					} else if b[47+i] == 51 {
						amount1 += 3 * powb(10, 1-i)
					} else if b[47+i] == 52 {
						amount1 += 4 * powb(10, 1-i)
					} else if b[47+i] == 53 {
						amount1 += 5 * powb(10, 1-i)
					} else if b[47+i] == 54 {
						amount1 += 6 * powb(10, 1-i)
					} else if b[47+i] == 55 {
						amount1 += 7 * powb(10, 1-i)
					} else if b[47+i] == 56 {
						amount1 += 8 * powb(10, 1-i)
					} else if b[47+i] == 57 {
						amount1 += 9 * powb(10, 1-i)
					} else {
					}
				}

				amount := amount1
				var lastprice1 int64
				lastprice1 = 0
				for i := 0; i < 10; i++ {
					if i == 6 || i == 7 || i == 8 || i == 9 {
						continue
					}
					if b[50+i] == 49 {
						lastprice1 += powb(10, 9-i)
					} else if b[50+i] == 50 {
						lastprice1 += 2 * powb(10, 9-i)
					} else if b[50+i] == 51 {
						lastprice1 += 3 * powb(10, 9-i)
					} else if b[50+i] == 52 {
						lastprice1 += 4 * powb(10, 9-i)
					} else if b[50+i] == 53 {
						lastprice1 += 5 * powb(10, 9-i)
					} else if b[50+i] == 54 {
						lastprice1 += 6 * powb(10, 9-i)
					} else if b[50+i] == 55 {
						lastprice1 += 7 * powb(10, 9-i)
					} else if b[50+i] == 56 {
						lastprice1 += 8 * powb(10, 9-i)
					} else if b[50+i] == 57 {
						lastprice1 += 9 * powb(10, 9-i)
					} else {
					}
				}
				for i := 0; i < 4; i++ {
					if b[57+i] == 49 {
						lastprice1 += powb(10, 3-i)
					} else if b[57+i] == 50 {
						lastprice1 += 2 * powb(10, 3-i)
					} else if b[57+i] == 51 {
						lastprice1 += 3 * powb(10, 3-i)
					} else if b[57+i] == 52 {
						lastprice1 += 4 * powb(10, 3-i)
					} else if b[57+i] == 53 {
						lastprice1 += 5 * powb(10, 3-i)
					} else if b[57+i] == 54 {
						lastprice1 += 6 * powb(10, 3-i)
					} else if b[57+i] == 55 {
						lastprice1 += 7 * powb(10, 3-i)
					} else if b[57+i] == 56 {
						lastprice1 += 8 * powb(10, 3-i)
					} else if b[57+i] == 57 {
						lastprice1 += 9 * powb(10, 3-i)
					} else {
					}
				}

				lastprice := lastprice1
				var open1 int64
				open1 = 0
				for i := 0; i < 10; i++ {
					if i == 6 || i == 7 || i == 8 || i == 9 {
						continue
					}
					if b[62+i] == 49 {
						open1 += powb(10, 9-i)
					} else if b[62+i] == 50 {
						open1 += 2 * powb(10, 9-i)
					} else if b[62+i] == 51 {
						open1 += 3 * powb(10, 9-i)
					} else if b[62+i] == 52 {
						open1 += 4 * powb(10, 9-i)
					} else if b[62+i] == 53 {
						open1 += 5 * powb(10, 9-i)
					} else if b[62+i] == 54 {
						open1 += 6 * powb(10, 9-i)
					} else if b[62+i] == 55 {
						open1 += 7 * powb(10, 9-i)
					} else if b[62+i] == 56 {
						open1 += 8 * powb(10, 9-i)
					} else if b[62+i] == 57 {
						open1 += 9 * powb(10, 9-i)
					} else {
					}
				}
				for i := 0; i < 4; i++ {
					if b[69+i] == 49 {
						open1 += powb(10, 3-i)
					} else if b[69+i] == 50 {
						open1 += 2 * powb(10, 3-i)
					} else if b[69+i] == 51 {
						open1 += 3 * powb(10, 3-i)
					} else if b[69+i] == 52 {
						open1 += 4 * powb(10, 3-i)
					} else if b[69+i] == 53 {
						open1 += 5 * powb(10, 3-i)
					} else if b[69+i] == 54 {
						open1 += 6 * powb(10, 3-i)
					} else if b[69+i] == 55 {
						open1 += 7 * powb(10, 3-i)
					} else if b[69+i] == 56 {
						open1 += 8 * powb(10, 3-i)
					} else if b[69+i] == 57 {
						open1 += 9 * powb(10, 3-i)
					} else {
					}
				}

				open := open1
				var high1 int64
				high1 = 0
				for i := 0; i < 10; i++ {
					if i == 6 || i == 7 || i == 8 || i == 9 {
						continue
					}
					if b[74+i] == 49 {
						high1 += powb(10, 9-i)
					} else if b[74+i] == 50 {
						high1 += 2 * powb(10, 9-i)
					} else if b[74+i] == 51 {
						high1 += 3 * powb(10, 9-i)
					} else if b[74+i] == 52 {
						high1 += 4 * powb(10, 9-i)
					} else if b[74+i] == 53 {
						high1 += 5 * powb(10, 9-i)
					} else if b[74+i] == 54 {
						high1 += 6 * powb(10, 9-i)
					} else if b[74+i] == 55 {
						high1 += 7 * powb(10, 9-i)
					} else if b[74+i] == 56 {
						high1 += 8 * powb(10, 9-i)
					} else if b[74+i] == 57 {
						high1 += 9 * powb(10, 9-i)
					} else {
					}
				}

				for i := 0; i < 4; i++ {
					if b[81+i] == 49 {
						high1 += powb(10, 3-i)
					} else if b[81+i] == 50 {
						high1 += 2 * powb(10, 3-i)
					} else if b[81+i] == 51 {
						high1 += 3 * powb(10, 3-i)
					} else if b[81+i] == 52 {
						high1 += 4 * powb(10, 3-i)
					} else if b[81+i] == 53 {
						high1 += 5 * powb(10, 3-i)
					} else if b[81+i] == 54 {
						high1 += 6 * powb(10, 3-i)
					} else if b[81+i] == 55 {
						high1 += 7 * powb(10, 3-i)
					} else if b[81+i] == 56 {
						high1 += 8 * powb(10, 3-i)
					} else if b[81+i] == 57 {
						high1 += 9 * powb(10, 3-i)
					} else {
					}
				}

				high := high1
				var low1 int64
				low1 = 0
				for i := 0; i < 10; i++ {
					if i == 6 || i == 7 || i == 8 || i == 9 {
						continue
					}
					if b[86+i] == 49 {
						low1 += powb(10, 9-i)
					} else if b[86+i] == 50 {
						low1 += 2 * powb(10, 9-i)
					} else if b[86+i] == 51 {
						low1 += 3 * powb(10, 9-i)
					} else if b[86+i] == 52 {
						low1 += 4 * powb(10, 9-i)
					} else if b[86+i] == 53 {
						low1 += 5 * powb(10, 9-i)
					} else if b[86+i] == 54 {
						low1 += 6 * powb(10, 9-i)
					} else if b[86+i] == 55 {
						low1 += 7 * powb(10, 9-i)
					} else if b[86+i] == 56 {
						low1 += 8 * powb(10, 9-i)
					} else if b[86+i] == 57 {
						low1 += 9 * powb(10, 9-i)
					} else {
					}
				}
				for i := 0; i < 4; i++ {
					if b[93+i] == 49 {
						low1 += powb(10, 3-i)
					} else if b[93+i] == 50 {
						low1 += 2 * powb(10, 3-i)
					} else if b[93+i] == 51 {
						low1 += 3 * powb(10, 3-i)
					} else if b[93+i] == 52 {
						low1 += 4 * powb(10, 3-i)
					} else if b[93+i] == 53 {
						low1 += 5 * powb(10, 3-i)
					} else if b[93+i] == 54 {
						low1 += 6 * powb(10, 3-i)
					} else if b[93+i] == 55 {
						low1 += 7 * powb(10, 3-i)
					} else if b[93+i] == 56 {
						low1 += 8 * powb(10, 3-i)
					} else if b[93+i] == 57 {
						low1 += 9 * powb(10, 3-i)
					} else {
					}
				}

				low := low1
				var tradeprice1 int64
				tradeprice1 = 0
				for i := 0; i < 10; i++ {
					if i == 6 || i == 7 || i == 8 || i == 9 {
						continue
					}
					if b[98+i] == 49 {
						tradeprice1 += powb(10, 9-i)
					} else if b[98+i] == 50 {
						tradeprice1 += 2 * powb(10, 9-i)
					} else if b[98+i] == 51 {
						tradeprice1 += 3 * powb(10, 9-i)
					} else if b[98+i] == 52 {
						tradeprice1 += 4 * powb(10, 9-i)
					} else if b[98+i] == 53 {
						tradeprice1 += 5 * powb(10, 9-i)
					} else if b[98+i] == 54 {
						tradeprice1 += 6 * powb(10, 9-i)
					} else if b[98+i] == 55 {
						tradeprice1 += 7 * powb(10, 9-i)
					} else if b[98+i] == 56 {
						tradeprice1 += 8 * powb(10, 9-i)
					} else if b[98+i] == 57 {
						tradeprice1 += 9 * powb(10, 9-i)
					} else {
					}
				}
				for i := 0; i < 4; i++ {
					if b[105+i] == 49 {
						tradeprice1 += powb(10, 3-i)
					} else if b[105+i] == 50 {
						tradeprice1 += 2 * powb(10, 3-i)
					} else if b[105+i] == 51 {
						tradeprice1 += 3 * powb(10, 3-i)
					} else if b[105+i] == 52 {
						tradeprice1 += 4 * powb(10, 3-i)
					} else if b[105+i] == 53 {
						tradeprice1 += 5 * powb(10, 3-i)
					} else if b[105+i] == 54 {
						tradeprice1 += 6 * powb(10, 3-i)
					} else if b[105+i] == 55 {
						tradeprice1 += 7 * powb(10, 3-i)
					} else if b[105+i] == 56 {
						tradeprice1 += 8 * powb(10, 3-i)
					} else if b[105+i] == 57 {
						tradeprice1 += 9 * powb(10, 3-i)
					} else {
					}
				}

				tradeprice := tradeprice1
				var closepx1 int64
				closepx1 = 0
				for i := 0; i < 10; i++ {
					if i == 6 || i == 7 || i == 8 || i == 9 {
						continue
					}
					if b[110+i] == 49 {
						closepx1 += powb(10, 9-i)
					} else if b[110+i] == 50 {
						closepx1 += 2 * powb(10, 9-i)
					} else if b[110+i] == 51 {
						closepx1 += 3 * powb(10, 9-i)
					} else if b[110+i] == 52 {
						closepx1 += 4 * powb(10, 9-i)
					} else if b[110+i] == 53 {
						closepx1 += 5 * powb(10, 9-i)
					} else if b[110+i] == 54 {
						closepx1 += 6 * powb(10, 9-i)
					} else if b[110+i] == 55 {
						closepx1 += 7 * powb(10, 9-i)
					} else if b[110+i] == 56 {
						closepx1 += 8 * powb(10, 9-i)
					} else if b[110+i] == 57 {
						closepx1 += 9 * powb(10, 9-i)
					} else {
					}
				}

				for i := 0; i < 4; i++ {
					if b[117+i] == 49 {
						closepx1 += powb(10, 3-i)
					} else if b[117+i] == 50 {
						closepx1 += 2 * powb(10, 3-i)
					} else if b[117+i] == 51 {
						closepx1 += 3 * powb(10, 3-i)
					} else if b[117+i] == 52 {
						closepx1 += 4 * powb(10, 3-i)
					} else if b[117+i] == 53 {
						closepx1 += 5 * powb(10, 3-i)
					} else if b[117+i] == 54 {
						closepx1 += 6 * powb(10, 3-i)
					} else if b[117+i] == 55 {
						closepx1 += 7 * powb(10, 3-i)
					} else if b[117+i] == 56 {
						closepx1 += 8 * powb(10, 3-i)
					} else if b[117+i] == 57 {
						closepx1 += 9 * powb(10, 3-i)
					} else {
					}
				}

				closepx := closepx1

				status1 := b[122]
				var status2 int64
				status2 = 0
				for i := 0; i < 3; i++ {
					if b[123+i] == 49 {
						status2 += powb(10, 2-i)
					} else {
					}
				}
				timestamp := make([]byte, 12)
				//copy(timestamp, b[131:143])
				copy(timestamp, b[131:])

				debug := false
				if debug {
					fmt.Printf("\n---[code|%v] [volume|%d] [amount|%f] [lastprice|%f]", code, volume, amount, lastprice)
					fmt.Printf(" [open|%f] [high|%f] [low|%f] [tradeprice|%f] [closepx|%f]", open, high, low, tradeprice, closepx)
					fmt.Printf(" [status1|%v] [status2|%d]", status1, status2)
					fmt.Printf("---\n")
				}
				l := 1 + 6 + 2 + 1 + 2 + 2 + 12

				x := volume
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = amount
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = lastprice
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = open
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = high
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = low
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = tradeprice
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = closepx
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				l += 2

				data := make([]byte, l)
				j := 0

				//code
				data[j] = 0
				j++
				data[j] = 6
				j++
				to := j + 6
				copy(data[j:], code)
				j = to

				//volume
				x = volume
				data[j] = 1
				j++
				for x >= 0x80 {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//amount
				x = amount
				data[j] = 2
				j++
				for x >= 0x80 {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//lastprice
				x = lastprice
				data[j] = 3
				j++
				for x >= 0x80 {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//open
				x = open
				data[j] = 4
				j++
				for x >= 0x80 {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//high
				x = high
				data[j] = 5
				j++
				for x >= 0x80 {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//low
				x = low
				data[j] = 6
				j++
				for x >= 0x80 {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//tradeprice
				x = tradeprice
				data[j] = 7
				j++
				for x >= 0x80 {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//closepx
				x = closepx
				data[j] = 8
				j++
				for x >= 0x80 {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//status1
				data[j] = 9
				j++
				data[j] = 1
				j++
				to = j + 1
				data[j] = status1
				j = to
				//status2
				x = status2
				data[j] = 10
				j++
				data[j] = byte(x)
				j++

				data[j] = 11
				j++
				data[j] = 12
				j++
				to = j + 12
				copy(data[j:], timestamp)
				j = to

				data[j] = 0x7f
				//fmt.Println("data:", data)
				o := &Md001struct{}
				if err := o.UnmarshalBinary(data); err != nil {
					panic(err)
				}
				debug = false
				if debug {
					fmt.Printf("\n!!![code|%v] [volume|%d] [amount|%d] [lastprice|%d]", o.Code, o.Volume, o.Amount, o.Lastprice)
					fmt.Printf(" [open|%d] [high|%d] [low|%d] [tradeprice|%d] [closepx|%d]", o.Open, o.High, o.Low, o.Tradeprice, o.Closepx)
					fmt.Printf(" [status1|%v] [status2|%d]", o.Status1, o.Status2)
					fmt.Printf(" [timestamp|%v]", o.Timestamp)
					fmt.Printf("!!!\n")
				}
				if count == 10 {
					ct2 := time.Now().Sub(tt1)
					fmt.Printf("%d %d %v\n", seq, count, ct2)
				}
				rbreduce.Put(data)
			}

		}(i)
	}
}

func powb(x, n int) int64 {
	if n == 0 {
		return 1
	}
	for {
		if (n & 1) != 0 {
			break
		}
		n >>= 1
		x *= x
	}
	result := x
	n >>= 1
	for {
		if n == 0 {
			break
		}
		x *= x
		if (n & 1) != 0 {
			result *= x
		}
		n >>= 1
	}
	return int64(result)
}

func md001reduce() {
	for {
		msg, _ := rbmd001notify.Get()
		sum := msg.(int)
		fmt.Printf("sum: %d\n", sum)
		l := sum * 512
		senddata := make([]byte, l)
		senddata[0] = 1
		alllen := 1
		for {
			if sum > 0 {
				data, _ := rbmd001reduce.Get()
				b := data.([]byte)
				datalen := len(b)
				copy(senddata[alllen:alllen+datalen], b)
				alllen += datalen
				//				senddata[alllen] = 0x7F
				//				alllen++
				sum--
			} else {
				break
			}
		}
		//alllen++
		senddata[alllen] = 0x15
		alllen++
		tosenddata := make([]byte, alllen)
		copy(tosenddata, senddata[0:alllen])
		rbreduce.Put(tosenddata)
		ctstart := time.Now().Sub(tstart)
		fmt.Printf("cost Time %s\n", ctstart)
	}
}

func md002map() {
	for i := 0; i < Conf.MaxProc; i++ {
		go func(seq int) {
			count := 0
			fmt.Println("start ", seq)
			tt1 := time.Now()
			for {
				count++
				msg, _ := rbmd002map.Get()
				b := msg.([]byte)
				code := make([]byte, 6)
				copy(code, b[0:6])
				
				var volume int64
				volume = 0
				for i := 0; i < 16; i++ {
					if b[16+i] == 49 {
						volume += powb(10, 15-i)
					} else if b[16+i] == 50 {
						volume += 2 * powb(10, 15-i)
					} else if b[16+i] == 51 {
						volume += 3 * powb(10, 15-i)
					} else if b[16+i] == 52 {
						volume += 4 * powb(10, 15-i)
					} else if b[16+i] == 53 {
						volume += 5 * powb(10, 15-i)
					} else if b[16+i] == 54 {
						volume += 6 * powb(10, 15-i)
					} else if b[16+i] == 55 {
						volume += 7 * powb(10, 15-i)
					} else if b[16+i] == 56 {
						volume += 8 * powb(10, 15-i)
					} else if b[16+i] == 57 {
						volume += 9 * powb(10, 15-i)
					} else {
					}
				}

				var amount int64
				amount = 0
				for i := 0; i < 16; i++ {
					n := 0
					if i == 13 {
						continue
					} else if i > 13 {
						n = i - 1
					} else {
						n = i
					}

					if b[33+i] == 49 {
						amount += powb(10, 14-n)
					} else if b[33+i] == 50 {
						amount += 2 * powb(10, 14-n)
					} else if b[33+i] == 51 {
						amount += 3 * powb(10, 14-n)
					} else if b[33+i] == 52 {
						amount += 4 * powb(10, 14-n)
					} else if b[33+i] == 53 {
						amount += 5 * powb(10, 14-n)
					} else if b[33+i] == 54 {
						amount += 6 * powb(10, 14-n)
					} else if b[33+i] == 55 {
						amount += 7 * powb(10, 14-n)
					} else if b[33+i] == 56 {
						amount += 8 * powb(10, 14-n)
					} else if b[33+i] == 57 {
						amount += 9 * powb(10, 14-n)
					} else {
					}
				}

				var lastprice int64
				lastprice = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[50+i] == 49 {
						lastprice += powb(10, 9-n)
					} else if b[50+i] == 50 {
						lastprice += 2 * powb(10, 9-n)
					} else if b[50+i] == 51 {
						lastprice += 3 * powb(10, 9-n)
					} else if b[50+i] == 52 {
						lastprice += 4 * powb(10, 9-n)
					} else if b[50+i] == 53 {
						lastprice += 5 * powb(10, 9-n)
					} else if b[50+i] == 54 {
						lastprice += 6 * powb(10, 9-n)
					} else if b[50+i] == 55 {
						lastprice += 7 * powb(10, 9-n)
					} else if b[50+i] == 56 {
						lastprice += 8 * powb(10, 9-n)
					} else if b[50+i] == 57 {
						lastprice += 9 * powb(10, 9-n)
					} else {
					}
				}

				var open int64
				open = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[62+i] == 49 {
						open += powb(10, 9-n)
					} else if b[62+i] == 50 {
						open += 2 * powb(10, 9-n)
					} else if b[62+i] == 51 {
						open += 3 * powb(10, 9-n)
					} else if b[62+i] == 52 {
						open += 4 * powb(10, 9-n)
					} else if b[62+i] == 53 {
						open += 5 * powb(10, 9-n)
					} else if b[62+i] == 54 {
						open += 6 * powb(10, 9-n)
					} else if b[62+i] == 55 {
						open += 7 * powb(10, 9-n)
					} else if b[62+i] == 56 {
						open += 8 * powb(10, 9-n)
					} else if b[62+i] == 57 {
						open += 9 * powb(10, 9-n)
					} else {
					}
				}

				var high int64
				high = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[74+i] == 49 {
						high += powb(10, 9-n)
					} else if b[74+i] == 50 {
						high += 2 * powb(10, 9-n)
					} else if b[74+i] == 51 {
						high += 3 * powb(10, 9-n)
					} else if b[74+i] == 52 {
						high += 4 * powb(10, 9-n)
					} else if b[74+i] == 53 {
						high += 5 * powb(10, 9-n)
					} else if b[74+i] == 54 {
						high += 6 * powb(10, 9-n)
					} else if b[74+i] == 55 {
						high += 7 * powb(10, 9-n)
					} else if b[74+i] == 56 {
						high += 8 * powb(10, 9-n)
					} else if b[74+i] == 57 {
						high += 9 * powb(10, 9-n)
					} else {
					}
				}

				var low int64
				low = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[86+i] == 49 {
						low += powb(10, 9-n)
					} else if b[86+i] == 50 {
						low += 2 * powb(10, 9-n)
					} else if b[86+i] == 51 {
						low += 3 * powb(10, 9-n)
					} else if b[86+i] == 52 {
						low += 4 * powb(10, 9-n)
					} else if b[86+i] == 53 {
						low += 5 * powb(10, 9-n)
					} else if b[86+i] == 54 {
						low += 6 * powb(10, 9-n)
					} else if b[86+i] == 55 {
						low += 7 * powb(10, 9-n)
					} else if b[86+i] == 56 {
						low += 8 * powb(10, 9-n)
					} else if b[86+i] == 57 {
						low += 9 * powb(10, 9-n)
					} else {
					}
				}

				var tradeprice int64
				tradeprice = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[98+i] == 49 {
						tradeprice += powb(10, 9-n)
					} else if b[98+i] == 50 {
						tradeprice += 2 * powb(10, 9-n)
					} else if b[98+i] == 51 {
						tradeprice += 3 * powb(10, 9-n)
					} else if b[98+i] == 52 {
						tradeprice += 4 * powb(10, 9-n)
					} else if b[98+i] == 53 {
						tradeprice += 5 * powb(10, 9-n)
					} else if b[98+i] == 54 {
						tradeprice += 6 * powb(10, 9-n)
					} else if b[98+i] == 55 {
						tradeprice += 7 * powb(10, 9-n)
					} else if b[98+i] == 56 {
						tradeprice += 8 * powb(10, 9-n)
					} else if b[98+i] == 57 {
						tradeprice += 9 * powb(10, 9-n)
					} else {
					}
				}

				var closepx int64
				closepx = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[110+i] == 49 {
						closepx += powb(10, 9-n)
					} else if b[110+i] == 50 {
						closepx += 2 * powb(10, 9-n)
					} else if b[110+i] == 51 {
						closepx += 3 * powb(10, 9-n)
					} else if b[110+i] == 52 {
						closepx += 4 * powb(10, 9-n)
					} else if b[110+i] == 53 {
						closepx += 5 * powb(10, 9-n)
					} else if b[110+i] == 54 {
						closepx += 6 * powb(10, 9-n)
					} else if b[110+i] == 55 {
						closepx += 7 * powb(10, 9-n)
					} else if b[110+i] == 56 {
						closepx += 8 * powb(10, 9-n)
					} else if b[110+i] == 57 {
						closepx += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bp1 int64
				bp1 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[122+i] == 49 {
						bp1 += powb(10, 9-n)
					} else if b[122+i] == 50 {
						bp1 += 2 * powb(10, 9-n)
					} else if b[122+i] == 51 {
						bp1 += 3 * powb(10, 9-n)
					} else if b[122+i] == 52 {
						bp1 += 4 * powb(10, 9-n)
					} else if b[122+i] == 53 {
						bp1 += 5 * powb(10, 9-n)
					} else if b[122+i] == 54 {
						bp1 += 6 * powb(10, 9-n)
					} else if b[122+i] == 55 {
						bp1 += 7 * powb(10, 9-n)
					} else if b[122+i] == 56 {
						bp1 += 8 * powb(10, 9-n)
					} else if b[122+i] == 57 {
						bp1 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bv1 int64
				bv1 = 0
				for i := 0; i < 12; i++ {
					if b[134+i] == 49 {
						bv1 += powb(10, 11-i)
					} else if b[134+i] == 50 {
						bv1 += 2 * powb(10, 11-i)
					} else if b[134+i] == 51 {
						bv1 += 3 * powb(10, 11-i)
					} else if b[134+i] == 52 {
						bv1 += 4 * powb(10, 11-i)
					} else if b[134+i] == 53 {
						bv1 += 5 * powb(10, 11-i)
					} else if b[134+i] == 54 {
						bv1 += 6 * powb(10, 11-i)
					} else if b[134+i] == 55 {
						bv1 += 7 * powb(10, 11-i)
					} else if b[134+i] == 56 {
						bv1 += 8 * powb(10, 11-i)
					} else if b[134+i] == 57 {
						bv1 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var sp1 int64
				sp1 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[147+i] == 49 {
						sp1 += powb(10, 9-n)
					} else if b[147+i] == 50 {
						sp1 += 2 * powb(10, 9-n)
					} else if b[147+i] == 51 {
						sp1 += 3 * powb(10, 9-n)
					} else if b[147+i] == 52 {
						sp1 += 4 * powb(10, 9-n)
					} else if b[147+i] == 53 {
						sp1 += 5 * powb(10, 9-n)
					} else if b[147+i] == 54 {
						sp1 += 6 * powb(10, 9-n)
					} else if b[147+i] == 55 {
						sp1 += 7 * powb(10, 9-n)
					} else if b[147+i] == 56 {
						sp1 += 8 * powb(10, 9-n)
					} else if b[147+i] == 57 {
						sp1 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var sv1 int64
				sv1 = 0
				for i := 0; i < 12; i++ {
					if b[159+i] == 49 {
						sv1 += powb(10, 11-i)
					} else if b[159+i] == 50 {
						sv1 += 2 * powb(10, 11-i)
					} else if b[159+i] == 51 {
						sv1 += 3 * powb(10, 11-i)
					} else if b[159+i] == 52 {
						sv1 += 4 * powb(10, 11-i)
					} else if b[159+i] == 53 {
						sv1 += 5 * powb(10, 11-i)
					} else if b[159+i] == 54 {
						sv1 += 6 * powb(10, 11-i)
					} else if b[159+i] == 55 {
						sv1 += 7 * powb(10, 11-i)
					} else if b[159+i] == 56 {
						sv1 += 8 * powb(10, 11-i)
					} else if b[159+i] == 57 {
						sv1 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var bp2 int64
				bp2 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[172+i] == 49 {
						bp2 += powb(10, 9-n)
					} else if b[172+i] == 50 {
						bp2 += 2 * powb(10, 9-n)
					} else if b[172+i] == 51 {
						bp2 += 3 * powb(10, 9-n)
					} else if b[172+i] == 52 {
						bp2 += 4 * powb(10, 9-n)
					} else if b[172+i] == 53 {
						bp2 += 5 * powb(10, 9-n)
					} else if b[172+i] == 54 {
						bp2 += 6 * powb(10, 9-n)
					} else if b[172+i] == 55 {
						bp2 += 7 * powb(10, 9-n)
					} else if b[172+i] == 56 {
						bp2 += 8 * powb(10, 9-n)
					} else if b[172+i] == 57 {
						bp2 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bv2 int64
				bv2 = 0
				for i := 0; i < 12; i++ {
					if b[184+i] == 49 {
						bv2 += powb(10, 11-i)
					} else if b[184+i] == 50 {
						bv2 += 2 * powb(10, 11-i)
					} else if b[184+i] == 51 {
						bv2 += 3 * powb(10, 11-i)
					} else if b[184+i] == 52 {
						bv2 += 4 * powb(10, 11-i)
					} else if b[184+i] == 53 {
						bv2 += 5 * powb(10, 11-i)
					} else if b[184+i] == 54 {
						bv2 += 6 * powb(10, 11-i)
					} else if b[184+i] == 55 {
						bv2 += 7 * powb(10, 11-i)
					} else if b[184+i] == 56 {
						bv2 += 8 * powb(10, 11-i)
					} else if b[184+i] == 57 {
						bv2 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var sp2 int64
				sp2 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[197+i] == 49 {
						sp2 += powb(10, 9-n)
					} else if b[197+i] == 50 {
						sp2 += 2 * powb(10, 9-n)
					} else if b[197+i] == 51 {
						sp2 += 3 * powb(10, 9-n)
					} else if b[197+i] == 52 {
						sp2 += 4 * powb(10, 9-n)
					} else if b[197+i] == 53 {
						sp2 += 5 * powb(10, 9-n)
					} else if b[197+i] == 54 {
						sp2 += 6 * powb(10, 9-n)
					} else if b[197+i] == 55 {
						sp2 += 7 * powb(10, 9-n)
					} else if b[197+i] == 56 {
						sp2 += 8 * powb(10, 9-n)
					} else if b[197+i] == 57 {
						sp2 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var sv2 int64
				sv2 = 0
				for i := 0; i < 12; i++ {
					if b[209+i] == 49 {
						sv2 += powb(10, 11-i)
					} else if b[209+i] == 50 {
						sv2 += 2 * powb(10, 11-i)
					} else if b[209+i] == 51 {
						sv2 += 3 * powb(10, 11-i)
					} else if b[209+i] == 52 {
						sv2 += 4 * powb(10, 11-i)
					} else if b[209+i] == 53 {
						sv2 += 5 * powb(10, 11-i)
					} else if b[209+i] == 54 {
						sv2 += 6 * powb(10, 11-i)
					} else if b[209+i] == 55 {
						sv2 += 7 * powb(10, 11-i)
					} else if b[209+i] == 56 {
						sv2 += 8 * powb(10, 11-i)
					} else if b[209+i] == 57 {
						sv2 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var bp3 int64
				bp3 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[222+i] == 49 {
						bp3 += powb(10, 9-n)
					} else if b[222+i] == 50 {
						bp3 += 2 * powb(10, 9-n)
					} else if b[222+i] == 51 {
						bp3 += 3 * powb(10, 9-n)
					} else if b[222+i] == 52 {
						bp3 += 4 * powb(10, 9-n)
					} else if b[222+i] == 53 {
						bp3 += 5 * powb(10, 9-n)
					} else if b[222+i] == 54 {
						bp3 += 6 * powb(10, 9-n)
					} else if b[222+i] == 55 {
						bp3 += 7 * powb(10, 9-n)
					} else if b[222+i] == 56 {
						bp3 += 8 * powb(10, 9-n)
					} else if b[222+i] == 57 {
						bp3 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bv3 int64
				bv3 = 0
				for i := 0; i < 12; i++ {
					if b[234+i] == 49 {
						bv3 += powb(10, 11-i)
					} else if b[234+i] == 50 {
						bv3 += 2 * powb(10, 11-i)
					} else if b[234+i] == 51 {
						bv3 += 3 * powb(10, 11-i)
					} else if b[234+i] == 52 {
						bv3 += 4 * powb(10, 11-i)
					} else if b[234+i] == 53 {
						bv3 += 5 * powb(10, 11-i)
					} else if b[234+i] == 54 {
						bv3 += 6 * powb(10, 11-i)
					} else if b[234+i] == 55 {
						bv3 += 7 * powb(10, 11-i)
					} else if b[234+i] == 56 {
						bv3 += 8 * powb(10, 11-i)
					} else if b[234+i] == 57 {
						bv3 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var sp3 int64
				sp3 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[247+i] == 49 {
						sp3 += powb(10, 9-n)
					} else if b[247+i] == 50 {
						sp3 += 2 * powb(10, 9-n)
					} else if b[247+i] == 51 {
						sp3 += 3 * powb(10, 9-n)
					} else if b[247+i] == 52 {
						sp3 += 4 * powb(10, 9-n)
					} else if b[247+i] == 53 {
						sp3 += 5 * powb(10, 9-n)
					} else if b[247+i] == 54 {
						sp3 += 6 * powb(10, 9-n)
					} else if b[247+i] == 55 {
						sp3 += 7 * powb(10, 9-n)
					} else if b[247+i] == 56 {
						sp3 += 8 * powb(10, 9-n)
					} else if b[247+i] == 57 {
						sp3 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var sv3 int64
				sv3 = 0
				for i := 0; i < 12; i++ {
					if b[259+i] == 49 {
						sv3 += powb(10, 11-i)
					} else if b[259+i] == 50 {
						sv3 += 2 * powb(10, 11-i)
					} else if b[259+i] == 51 {
						sv3 += 3 * powb(10, 11-i)
					} else if b[259+i] == 52 {
						sv3 += 4 * powb(10, 11-i)
					} else if b[259+i] == 53 {
						sv3 += 5 * powb(10, 11-i)
					} else if b[259+i] == 54 {
						sv3 += 6 * powb(10, 11-i)
					} else if b[259+i] == 55 {
						sv3 += 7 * powb(10, 11-i)
					} else if b[259+i] == 56 {
						sv3 += 8 * powb(10, 11-i)
					} else if b[259+i] == 57 {
						sv3 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var bp4 int64
				bp4 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[272+i] == 49 {
						bp4 += powb(10, 9-n)
					} else if b[272+i] == 50 {
						bp4 += 2 * powb(10, 9-n)
					} else if b[272+i] == 51 {
						bp4 += 3 * powb(10, 9-n)
					} else if b[272+i] == 52 {
						bp4 += 4 * powb(10, 9-n)
					} else if b[272+i] == 53 {
						bp4 += 5 * powb(10, 9-n)
					} else if b[272+i] == 54 {
						bp4 += 6 * powb(10, 9-n)
					} else if b[272+i] == 55 {
						bp4 += 7 * powb(10, 9-n)
					} else if b[272+i] == 56 {
						bp4 += 8 * powb(10, 9-n)
					} else if b[272+i] == 57 {
						bp4 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bv4 int64
				bv4 = 0
				for i := 0; i < 12; i++ {
					if b[284+i] == 49 {
						bv4 += powb(10, 11-i)
					} else if b[284+i] == 50 {
						bv4 += 2 * powb(10, 11-i)
					} else if b[284+i] == 51 {
						bv4 += 3 * powb(10, 11-i)
					} else if b[284+i] == 52 {
						bv4 += 4 * powb(10, 11-i)
					} else if b[284+i] == 53 {
						bv4 += 5 * powb(10, 11-i)
					} else if b[284+i] == 54 {
						bv4 += 6 * powb(10, 11-i)
					} else if b[284+i] == 55 {
						bv4 += 7 * powb(10, 11-i)
					} else if b[284+i] == 56 {
						bv4 += 8 * powb(10, 11-i)
					} else if b[284+i] == 57 {
						bv4 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var sp4 int64
				sp4 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[297+i] == 49 {
						sp4 += powb(10, 9-n)
					} else if b[297+i] == 50 {
						sp4 += 2 * powb(10, 9-n)
					} else if b[297+i] == 51 {
						sp4 += 3 * powb(10, 9-n)
					} else if b[297+i] == 52 {
						sp4 += 4 * powb(10, 9-n)
					} else if b[297+i] == 53 {
						sp4 += 5 * powb(10, 9-n)
					} else if b[297+i] == 54 {
						sp4 += 6 * powb(10, 9-n)
					} else if b[297+i] == 55 {
						sp4 += 7 * powb(10, 9-n)
					} else if b[297+i] == 56 {
						sp4 += 8 * powb(10, 9-n)
					} else if b[297+i] == 57 {
						sp4 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var sv4 int64
				sv4 = 0
				for i := 0; i < 12; i++ {
					if b[309+i] == 49 {
						sv4 += powb(10, 11-i)
					} else if b[309+i] == 50 {
						sv4 += 2 * powb(10, 11-i)
					} else if b[309+i] == 51 {
						sv4 += 3 * powb(10, 11-i)
					} else if b[309+i] == 52 {
						sv4 += 4 * powb(10, 11-i)
					} else if b[309+i] == 53 {
						sv4 += 5 * powb(10, 11-i)
					} else if b[309+i] == 54 {
						sv4 += 6 * powb(10, 11-i)
					} else if b[309+i] == 55 {
						sv4 += 7 * powb(10, 11-i)
					} else if b[309+i] == 56 {
						sv4 += 8 * powb(10, 11-i)
					} else if b[309+i] == 57 {
						sv4 += 9 * powb(10, 11-i)
					} else {
					}
				}
				var bp5 int64
				bp5 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[322+i] == 49 {
						bp5 += powb(10, 9-n)
					} else if b[322+i] == 50 {
						bp5 += 2 * powb(10, 9-n)
					} else if b[322+i] == 51 {
						bp5 += 3 * powb(10, 9-n)
					} else if b[322+i] == 52 {
						bp5 += 4 * powb(10, 9-n)
					} else if b[322+i] == 53 {
						bp5 += 5 * powb(10, 9-n)
					} else if b[322+i] == 54 {
						bp5 += 6 * powb(10, 9-n)
					} else if b[322+i] == 55 {
						bp5 += 7 * powb(10, 9-n)
					} else if b[322+i] == 56 {
						bp5 += 8 * powb(10, 9-n)
					} else if b[322+i] == 57 {
						bp5 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bv5 int64
				bv5 = 0
				for i := 0; i < 12; i++ {
					if b[334+i] == 49 {
						bv5 += powb(10, 11-i)
					} else if b[334+i] == 50 {
						bv5 += 2 * powb(10, 11-i)
					} else if b[334+i] == 51 {
						bv5 += 3 * powb(10, 11-i)
					} else if b[334+i] == 52 {
						bv5 += 4 * powb(10, 11-i)
					} else if b[334+i] == 53 {
						bv5 += 5 * powb(10, 11-i)
					} else if b[334+i] == 54 {
						bv5 += 6 * powb(10, 11-i)
					} else if b[334+i] == 55 {
						bv5 += 7 * powb(10, 11-i)
					} else if b[334+i] == 56 {
						bv5 += 8 * powb(10, 11-i)
					} else if b[334+i] == 57 {
						bv5 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var sp5 int64
				sp5 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[347+i] == 49 {
						sp5 += powb(10, 9-n)
					} else if b[347+i] == 50 {
						sp5 += 2 * powb(10, 9-n)
					} else if b[347+i] == 51 {
						sp5 += 3 * powb(10, 9-n)
					} else if b[347+i] == 52 {
						sp5 += 4 * powb(10, 9-n)
					} else if b[347+i] == 53 {
						sp5 += 5 * powb(10, 9-n)
					} else if b[347+i] == 54 {
						sp5 += 6 * powb(10, 9-n)
					} else if b[347+i] == 55 {
						sp5 += 7 * powb(10, 9-n)
					} else if b[347+i] == 56 {
						sp5 += 8 * powb(10, 9-n)
					} else if b[347+i] == 57 {
						sp5 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var sv5 int64
				sv5 = 0
				for i := 0; i < 12; i++ {
					if b[359+i] == 49 {
						sv5 += powb(10, 11-i)
					} else if b[359+i] == 50 {
						sv5 += 2 * powb(10, 11-i)
					} else if b[359+i] == 51 {
						sv5 += 3 * powb(10, 11-i)
					} else if b[359+i] == 52 {
						sv5 += 4 * powb(10, 11-i)
					} else if b[359+i] == 53 {
						sv5 += 5 * powb(10, 11-i)
					} else if b[359+i] == 54 {
						sv5 += 6 * powb(10, 11-i)
					} else if b[359+i] == 55 {
						sv5 += 7 * powb(10, 11-i)
					} else if b[359+i] == 56 {
						sv5 += 8 * powb(10, 11-i)
					} else if b[359+i] == 57 {
						sv5 += 9 * powb(10, 11-i)
					} else {
					}
				}

				status1 := b[372]

				var status2 int64
				status2 = 0
				for i := 0; i < 3; i++ {
					if b[373+i] == 49 {
						status2 += powb(10, 2-i)
					} else {
					}
				}
				timestamp := make([]byte, 12)
				//copy(timestamp, b[381:393])
				copy(timestamp, b[381:])

				debug := false
				if debug {
					fmt.Printf("\n---[code|%v] [volume|%d] [amount|%d] [lastprice|%d]", code, volume, amount, lastprice)
					fmt.Printf(" [open|%d] [high|%d] [low|%d] [tradeprice|%d] [closepx|%d]", open, high, low, tradeprice, closepx)
					fmt.Printf(" [bp1|%d] [bv1|%d] [sp1|%d] [sv1|%d]", bp1, bv1, sp1, sv1)
					fmt.Printf(" [bp2|%d] [bv2|%d] [sp2|%d] [sv2|%d]", bp2, bv2, sp2, sv2)
					fmt.Printf(" [bp3|%d] [bv3|%d] [sp3|%d] [sv3|%d]", bp3, bv3, sp3, sv3)
					fmt.Printf(" [bp4|%d] [bv4|%d] [sp4|%d] [sv4|%d]", bp4, bv4, sp4, sv4)
					fmt.Printf(" [bp5|%d] [bv5|%d] [sp5|%d] [sv5|%d]", bp5, bv5, sp5, sv5)
					fmt.Printf(" [status1|%v] [status2|%d]", status1, status2)
					fmt.Printf("---\n")
				}
				l := 1 + 6 + 2 + 1 + 2 + 2 + 12

				x := volume
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = amount
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = lastprice
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = open
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = high
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = low
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = tradeprice
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = closepx
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bp1
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bv1
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sp1
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sv1
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bp2
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bv2
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sp2
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sv2
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bp3
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bv3
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sp3
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sv3
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bp4
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bv4
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sp4
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sv4
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bp5
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bv5
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sp5
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sv5
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				l += 2

				data := make([]byte, l)
				j := 0

				//code
				data[j] = 0
				j++
				data[j] = 6
				j++
				to := j + 6
				copy(data[j:], code)
				j = to

				//volume
				x = volume
				data[j] = 1
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//amount
				x = amount
				data[j] = 2
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//lastprice
				x = lastprice
				data[j] = 3
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//open
				x = open
				data[j] = 4
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//high
				x = high
				data[j] = 5
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//low
				x = low
				data[j] = 6
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//tradeprice
				x = tradeprice
				data[j] = 7
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//closepx
				x = closepx
				data[j] = 8
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bp1
				x = bp1
				data[j] = 9
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bv1
				x = bv1
				data[j] = 10
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++

				}
				data[j] = byte(x)
				j++

				//sp1
				x = sp1
				data[j] = 11
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sv1
				x = sv1
				data[j] = 12
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++

				}
				data[j] = byte(x)
				j++

				//bp2
				x = bp2
				data[j] = 13
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bv2
				x = bv2
				data[j] = 14
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sp2
				x = sp2
				data[j] = 15
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sv2
				x = sv2
				data[j] = 16
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bp3
				x = bp3
				data[j] = 17
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bv3
				x = bv3
				data[j] = 18
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sp3
				x = sp3
				data[j] = 19
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sv3
				x = sv3
				data[j] = 20
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bp4
				x = bp4
				data[j] = 21
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bv4
				x = bv4
				data[j] = 22
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sp4
				x = sp4
				data[j] = 23
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sv4
				x = sv4
				data[j] = 24
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bp5
				x = bp5
				data[j] = 25
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bv5
				x = bv5
				data[j] = 26
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sp5
				x = sp5
				data[j] = 27
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sv5
				x = sv5
				data[j] = 28
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//status1
				data[j] = 29
				j++
				data[j] = 1
				j++
				to = j + 1
				data[j] = status1
				j = to
				//status2
				x = status2
				data[j] = 30
				j++
				data[j] = byte(x)
				j++

				data[j] = 31
				j++
				data[j] = 12
				j++
				to = j + 12
				copy(data[j:], timestamp)
				j = to

				data[j] = 0x7f
				o := &Md002struct{}
				if err := o.UnmarshalBinary(data); err != nil {
					panic(err)
				}
				debug = false
				if debug {
					fmt.Printf("\n!!![code|%v] [volume|%d] [amount|%d] [lastprice|%d]", o.Code, o.Volume, o.Amount, o.Lastprice)
					fmt.Printf(" [open|%d] [high|%d] [low|%d] [tradeprice|%d] [closepx|%d]", o.Open, o.High, o.Low, o.Tradeprice, o.Closepx)
					fmt.Printf(" [bp1|%d] [bv1|%d] [sp1|%d] [sv1|%d]", o.Bp1, o.Bv1, o.Sp1, o.Sv1)
					fmt.Printf(" [bp2|%d] [bv2|%d] [sp2|%d] [sv2|%d]", o.Bp2, o.Bv2, o.Sp2, o.Sv2)
					fmt.Printf(" [bp3|%d] [bv3|%d] [sp3|%d] [sv3|%d]", o.Bp3, o.Bv3, o.Sp3, o.Sv3)
					fmt.Printf(" [bp4|%d] [bv4|%d] [sp4|%d] [sv4|%d]", o.Bp4, o.Bv4, o.Sp4, o.Sv4)
					fmt.Printf(" [bp5|%d] [bv5|%d] [sp5|%d] [sv5|%d]", o.Bp5, o.Bv5, o.Sp5, o.Sv5)
					fmt.Printf(" [status1|%v] [status2|%d]", o.Status1, o.Status2)
					fmt.Printf(" [timestamp|%v]", o.Timestamp)
					fmt.Printf("!!!\n")
				}
				if count == 10 {
					ct2 := time.Now().Sub(tt1)
					fmt.Printf("%d %d %v\n", seq, count, ct2)
				}
				rbreduce.Put(data)

			}

		}(i)
	}

}

func md002reduce() {
	for {
		msg, _ := rbmd002notify.Get()
		sum := msg.(int)
		fmt.Printf("sum: %d\n", sum)
		l := sum * 512
		senddata := make([]byte, l)
		senddata[0] = 2
		alllen := 1
		for {
			if sum > 0 {
				data, _ := rbmd002reduce.Get()
				b := data.([]byte)
				datalen := len(b)
				copy(senddata[alllen:alllen+datalen], b)
				alllen += datalen
				//				senddata[alllen] = 0x7F
				//				alllen++
				sum--
			} else {
				break
			}
		}
		//alllen++
		senddata[alllen] = 0x15
		alllen++
		tosenddata := make([]byte, alllen)
		copy(tosenddata, senddata[0:alllen])
		rbreduce.Put(tosenddata)
		ctstart := time.Now().Sub(tstart)
		fmt.Printf("cost Time %s\n", ctstart)
	}
}

func md004map() {
	for i := 0; i < Conf.MaxProc; i++ {
		go func(seq int) {
			count := 0
			fmt.Println("start ", seq)
			tt1 := time.Now()
			for {
				count++
				msg, _ := rbmd004map.Get()
				b := msg.([]byte)
				code := make([]byte, 6)
				copy(code, b[0:6])
				
				var volume int64
				volume = 0
				for i := 0; i < 16; i++ {
					if b[16+i] == 49 {
						volume += powb(10, 15-i)
					} else if b[16+i] == 50 {
						volume += 2 * powb(10, 15-i)
					} else if b[16+i] == 51 {
						volume += 3 * powb(10, 15-i)
					} else if b[16+i] == 52 {
						volume += 4 * powb(10, 15-i)
					} else if b[16+i] == 53 {
						volume += 5 * powb(10, 15-i)
					} else if b[16+i] == 54 {
						volume += 6 * powb(10, 15-i)
					} else if b[16+i] == 55 {
						volume += 7 * powb(10, 15-i)
					} else if b[16+i] == 56 {
						volume += 8 * powb(10, 15-i)
					} else if b[16+i] == 57 {
						volume += 9 * powb(10, 15-i)
					} else {
					}
				}
				var amount int64
				amount = 0
				for i := 0; i < 16; i++ {
					n := 0
					if i == 13 {
						continue
					} else if i > 13 {
						n = i - 1
					} else {
						n = i
					}

					if b[33+i] == 49 {
						amount += powb(10, 14-n)
					} else if b[33+i] == 50 {
						amount += 2 * powb(10, 14-n)
					} else if b[33+i] == 51 {
						amount += 3 * powb(10, 14-n)
					} else if b[33+i] == 52 {
						amount += 4 * powb(10, 14-n)
					} else if b[33+i] == 53 {
						amount += 5 * powb(10, 14-n)
					} else if b[33+i] == 54 {
						amount += 6 * powb(10, 14-n)
					} else if b[33+i] == 55 {
						amount += 7 * powb(10, 14-n)
					} else if b[33+i] == 56 {
						amount += 8 * powb(10, 14-n)
					} else if b[33+i] == 57 {
						amount += 9 * powb(10, 14-n)
					} else {
					}
				}

				var lastprice int64
				lastprice = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[50+i] == 49 {
						lastprice += powb(10, 9-n)
					} else if b[50+i] == 50 {
						lastprice += 2 * powb(10, 9-n)
					} else if b[50+i] == 51 {
						lastprice += 3 * powb(10, 9-n)
					} else if b[50+i] == 52 {
						lastprice += 4 * powb(10, 9-n)
					} else if b[50+i] == 53 {
						lastprice += 5 * powb(10, 9-n)
					} else if b[50+i] == 54 {
						lastprice += 6 * powb(10, 9-n)
					} else if b[50+i] == 55 {
						lastprice += 7 * powb(10, 9-n)
					} else if b[50+i] == 56 {
						lastprice += 8 * powb(10, 9-n)
					} else if b[50+i] == 57 {
						lastprice += 9 * powb(10, 9-n)
					} else {
					}
				}

				var open int64
				open = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[62+i] == 49 {
						open += powb(10, 9-n)
					} else if b[62+i] == 50 {
						open += 2 * powb(10, 9-n)
					} else if b[62+i] == 51 {
						open += 3 * powb(10, 9-n)
					} else if b[62+i] == 52 {
						open += 4 * powb(10, 9-n)
					} else if b[62+i] == 53 {
						open += 5 * powb(10, 9-n)
					} else if b[62+i] == 54 {
						open += 6 * powb(10, 9-n)
					} else if b[62+i] == 55 {
						open += 7 * powb(10, 9-n)
					} else if b[62+i] == 56 {
						open += 8 * powb(10, 9-n)
					} else if b[62+i] == 57 {
						open += 9 * powb(10, 9-n)
					} else {
					}
				}

				var high int64
				high = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[74+i] == 49 {
						high += powb(10, 9-n)
					} else if b[74+i] == 50 {
						high += 2 * powb(10, 9-n)
					} else if b[74+i] == 51 {
						high += 3 * powb(10, 9-n)
					} else if b[74+i] == 52 {
						high += 4 * powb(10, 9-n)
					} else if b[74+i] == 53 {
						high += 5 * powb(10, 9-n)
					} else if b[74+i] == 54 {
						high += 6 * powb(10, 9-n)
					} else if b[74+i] == 55 {
						high += 7 * powb(10, 9-n)
					} else if b[74+i] == 56 {
						high += 8 * powb(10, 9-n)
					} else if b[74+i] == 57 {
						high += 9 * powb(10, 9-n)
					} else {
					}
				}

				var low int64
				low = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[86+i] == 49 {
						low += powb(10, 9-n)
					} else if b[86+i] == 50 {
						low += 2 * powb(10, 9-n)
					} else if b[86+i] == 51 {
						low += 3 * powb(10, 9-n)
					} else if b[86+i] == 52 {
						low += 4 * powb(10, 9-n)
					} else if b[86+i] == 53 {
						low += 5 * powb(10, 9-n)
					} else if b[86+i] == 54 {
						low += 6 * powb(10, 9-n)
					} else if b[86+i] == 55 {
						low += 7 * powb(10, 9-n)
					} else if b[86+i] == 56 {
						low += 8 * powb(10, 9-n)
					} else if b[86+i] == 57 {
						low += 9 * powb(10, 9-n)
					} else {
					}
				}

				var tradeprice int64
				tradeprice = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[98+i] == 49 {
						tradeprice += powb(10, 9-n)
					} else if b[98+i] == 50 {
						tradeprice += 2 * powb(10, 9-n)
					} else if b[98+i] == 51 {
						tradeprice += 3 * powb(10, 9-n)
					} else if b[98+i] == 52 {
						tradeprice += 4 * powb(10, 9-n)
					} else if b[98+i] == 53 {
						tradeprice += 5 * powb(10, 9-n)
					} else if b[98+i] == 54 {
						tradeprice += 6 * powb(10, 9-n)
					} else if b[98+i] == 55 {
						tradeprice += 7 * powb(10, 9-n)
					} else if b[98+i] == 56 {
						tradeprice += 8 * powb(10, 9-n)
					} else if b[98+i] == 57 {
						tradeprice += 9 * powb(10, 9-n)
					} else {
					}
				}

				var closepx int64
				closepx = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[110+i] == 49 {
						closepx += powb(10, 9-n)
					} else if b[110+i] == 50 {
						closepx += 2 * powb(10, 9-n)
					} else if b[110+i] == 51 {
						closepx += 3 * powb(10, 9-n)
					} else if b[110+i] == 52 {
						closepx += 4 * powb(10, 9-n)
					} else if b[110+i] == 53 {
						closepx += 5 * powb(10, 9-n)
					} else if b[110+i] == 54 {
						closepx += 6 * powb(10, 9-n)
					} else if b[110+i] == 55 {
						closepx += 7 * powb(10, 9-n)
					} else if b[110+i] == 56 {
						closepx += 8 * powb(10, 9-n)
					} else if b[110+i] == 57 {
						closepx += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bp1 int64
				bp1 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[122+i] == 49 {
						bp1 += powb(10, 9-n)
					} else if b[122+i] == 50 {
						bp1 += 2 * powb(10, 9-n)
					} else if b[122+i] == 51 {
						bp1 += 3 * powb(10, 9-n)
					} else if b[122+i] == 52 {
						bp1 += 4 * powb(10, 9-n)
					} else if b[122+i] == 53 {
						bp1 += 5 * powb(10, 9-n)
					} else if b[122+i] == 54 {
						bp1 += 6 * powb(10, 9-n)
					} else if b[122+i] == 55 {
						bp1 += 7 * powb(10, 9-n)
					} else if b[122+i] == 56 {
						bp1 += 8 * powb(10, 9-n)
					} else if b[122+i] == 57 {
						bp1 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bv1 int64
				bv1 = 0
				for i := 0; i < 12; i++ {
					if b[134+i] == 49 {
						bv1 += powb(10, 11-i)
					} else if b[134+i] == 50 {
						bv1 += 2 * powb(10, 11-i)
					} else if b[134+i] == 51 {
						bv1 += 3 * powb(10, 11-i)
					} else if b[134+i] == 52 {
						bv1 += 4 * powb(10, 11-i)
					} else if b[134+i] == 53 {
						bv1 += 5 * powb(10, 11-i)
					} else if b[134+i] == 54 {
						bv1 += 6 * powb(10, 11-i)
					} else if b[134+i] == 55 {
						bv1 += 7 * powb(10, 11-i)
					} else if b[134+i] == 56 {
						bv1 += 8 * powb(10, 11-i)
					} else if b[134+i] == 57 {
						bv1 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var sp1 int64
				sp1 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[147+i] == 49 {
						sp1 += powb(10, 9-n)
					} else if b[147+i] == 50 {
						sp1 += 2 * powb(10, 9-n)
					} else if b[147+i] == 51 {
						sp1 += 3 * powb(10, 9-n)
					} else if b[147+i] == 52 {
						sp1 += 4 * powb(10, 9-n)
					} else if b[147+i] == 53 {
						sp1 += 5 * powb(10, 9-n)
					} else if b[147+i] == 54 {
						sp1 += 6 * powb(10, 9-n)
					} else if b[147+i] == 55 {
						sp1 += 7 * powb(10, 9-n)
					} else if b[147+i] == 56 {
						sp1 += 8 * powb(10, 9-n)
					} else if b[147+i] == 57 {
						sp1 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var sv1 int64
				sv1 = 0
				for i := 0; i < 12; i++ {
					if b[159+i] == 49 {
						sv1 += powb(10, 11-i)
					} else if b[159+i] == 50 {
						sv1 += 2 * powb(10, 11-i)
					} else if b[159+i] == 51 {
						sv1 += 3 * powb(10, 11-i)
					} else if b[159+i] == 52 {
						sv1 += 4 * powb(10, 11-i)
					} else if b[159+i] == 53 {
						sv1 += 5 * powb(10, 11-i)
					} else if b[159+i] == 54 {
						sv1 += 6 * powb(10, 11-i)
					} else if b[159+i] == 55 {
						sv1 += 7 * powb(10, 11-i)
					} else if b[159+i] == 56 {
						sv1 += 8 * powb(10, 11-i)
					} else if b[159+i] == 57 {
						sv1 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var bp2 int64
				bp2 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[172+i] == 49 {
						bp2 += powb(10, 9-n)
					} else if b[172+i] == 50 {
						bp2 += 2 * powb(10, 9-n)
					} else if b[172+i] == 51 {
						bp2 += 3 * powb(10, 9-n)
					} else if b[172+i] == 52 {
						bp2 += 4 * powb(10, 9-n)
					} else if b[172+i] == 53 {
						bp2 += 5 * powb(10, 9-n)
					} else if b[172+i] == 54 {
						bp2 += 6 * powb(10, 9-n)
					} else if b[172+i] == 55 {
						bp2 += 7 * powb(10, 9-n)
					} else if b[172+i] == 56 {
						bp2 += 8 * powb(10, 9-n)
					} else if b[172+i] == 57 {
						bp2 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bv2 int64
				bv2 = 0
				for i := 0; i < 12; i++ {
					if b[184+i] == 49 {
						bv2 += powb(10, 11-i)
					} else if b[184+i] == 50 {
						bv2 += 2 * powb(10, 11-i)
					} else if b[184+i] == 51 {
						bv2 += 3 * powb(10, 11-i)
					} else if b[184+i] == 52 {
						bv2 += 4 * powb(10, 11-i)
					} else if b[184+i] == 53 {
						bv2 += 5 * powb(10, 11-i)
					} else if b[184+i] == 54 {
						bv2 += 6 * powb(10, 11-i)
					} else if b[184+i] == 55 {
						bv2 += 7 * powb(10, 11-i)
					} else if b[184+i] == 56 {
						bv2 += 8 * powb(10, 11-i)
					} else if b[184+i] == 57 {
						bv2 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var sp2 int64
				sp2 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[197+i] == 49 {
						sp2 += powb(10, 9-n)
					} else if b[197+i] == 50 {
						sp2 += 2 * powb(10, 9-n)
					} else if b[197+i] == 51 {
						sp2 += 3 * powb(10, 9-n)
					} else if b[197+i] == 52 {
						sp2 += 4 * powb(10, 9-n)
					} else if b[197+i] == 53 {
						sp2 += 5 * powb(10, 9-n)
					} else if b[197+i] == 54 {
						sp2 += 6 * powb(10, 9-n)
					} else if b[197+i] == 55 {
						sp2 += 7 * powb(10, 9-n)
					} else if b[197+i] == 56 {
						sp2 += 8 * powb(10, 9-n)
					} else if b[197+i] == 57 {
						sp2 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var sv2 int64
				sv2 = 0
				for i := 0; i < 12; i++ {
					if b[209+i] == 49 {
						sv2 += powb(10, 11-i)
					} else if b[209+i] == 50 {
						sv2 += 2 * powb(10, 11-i)
					} else if b[209+i] == 51 {
						sv2 += 3 * powb(10, 11-i)
					} else if b[209+i] == 52 {
						sv2 += 4 * powb(10, 11-i)
					} else if b[209+i] == 53 {
						sv2 += 5 * powb(10, 11-i)
					} else if b[209+i] == 54 {
						sv2 += 6 * powb(10, 11-i)
					} else if b[209+i] == 55 {
						sv2 += 7 * powb(10, 11-i)
					} else if b[209+i] == 56 {
						sv2 += 8 * powb(10, 11-i)
					} else if b[209+i] == 57 {
						sv2 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var bp3 int64
				bp3 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[222+i] == 49 {
						bp3 += powb(10, 9-n)
					} else if b[222+i] == 50 {
						bp3 += 2 * powb(10, 9-n)
					} else if b[222+i] == 51 {
						bp3 += 3 * powb(10, 9-n)
					} else if b[222+i] == 52 {
						bp3 += 4 * powb(10, 9-n)
					} else if b[222+i] == 53 {
						bp3 += 5 * powb(10, 9-n)
					} else if b[222+i] == 54 {
						bp3 += 6 * powb(10, 9-n)
					} else if b[222+i] == 55 {
						bp3 += 7 * powb(10, 9-n)
					} else if b[222+i] == 56 {
						bp3 += 8 * powb(10, 9-n)
					} else if b[222+i] == 57 {
						bp3 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bv3 int64
				bv3 = 0
				for i := 0; i < 12; i++ {
					if b[234+i] == 49 {
						bv3 += powb(10, 11-i)
					} else if b[234+i] == 50 {
						bv3 += 2 * powb(10, 11-i)
					} else if b[234+i] == 51 {
						bv3 += 3 * powb(10, 11-i)
					} else if b[234+i] == 52 {
						bv3 += 4 * powb(10, 11-i)
					} else if b[234+i] == 53 {
						bv3 += 5 * powb(10, 11-i)
					} else if b[234+i] == 54 {
						bv3 += 6 * powb(10, 11-i)
					} else if b[234+i] == 55 {
						bv3 += 7 * powb(10, 11-i)
					} else if b[234+i] == 56 {
						bv3 += 8 * powb(10, 11-i)
					} else if b[234+i] == 57 {
						bv3 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var sp3 int64
				sp3 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[247+i] == 49 {
						sp3 += powb(10, 9-n)
					} else if b[247+i] == 50 {
						sp3 += 2 * powb(10, 9-n)
					} else if b[247+i] == 51 {
						sp3 += 3 * powb(10, 9-n)
					} else if b[247+i] == 52 {
						sp3 += 4 * powb(10, 9-n)
					} else if b[247+i] == 53 {
						sp3 += 5 * powb(10, 9-n)
					} else if b[247+i] == 54 {
						sp3 += 6 * powb(10, 9-n)
					} else if b[247+i] == 55 {
						sp3 += 7 * powb(10, 9-n)
					} else if b[247+i] == 56 {
						sp3 += 8 * powb(10, 9-n)
					} else if b[247+i] == 57 {
						sp3 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var sv3 int64
				sv3 = 0
				for i := 0; i < 12; i++ {
					if b[259+i] == 49 {
						sv3 += powb(10, 11-i)
					} else if b[259+i] == 50 {
						sv3 += 2 * powb(10, 11-i)
					} else if b[259+i] == 51 {
						sv3 += 3 * powb(10, 11-i)
					} else if b[259+i] == 52 {
						sv3 += 4 * powb(10, 11-i)
					} else if b[259+i] == 53 {
						sv3 += 5 * powb(10, 11-i)
					} else if b[259+i] == 54 {
						sv3 += 6 * powb(10, 11-i)
					} else if b[259+i] == 55 {
						sv3 += 7 * powb(10, 11-i)
					} else if b[259+i] == 56 {
						sv3 += 8 * powb(10, 11-i)
					} else if b[259+i] == 57 {
						sv3 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var bp4 int64
				bp4 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[272+i] == 49 {
						bp4 += powb(10, 9-n)
					} else if b[272+i] == 50 {
						bp4 += 2 * powb(10, 9-n)
					} else if b[272+i] == 51 {
						bp4 += 3 * powb(10, 9-n)
					} else if b[272+i] == 52 {
						bp4 += 4 * powb(10, 9-n)
					} else if b[272+i] == 53 {
						bp4 += 5 * powb(10, 9-n)
					} else if b[272+i] == 54 {
						bp4 += 6 * powb(10, 9-n)
					} else if b[272+i] == 55 {
						bp4 += 7 * powb(10, 9-n)
					} else if b[272+i] == 56 {
						bp4 += 8 * powb(10, 9-n)
					} else if b[272+i] == 57 {
						bp4 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bv4 int64
				bv4 = 0
				for i := 0; i < 12; i++ {
					if b[284+i] == 49 {
						bv4 += powb(10, 11-i)
					} else if b[284+i] == 50 {
						bv4 += 2 * powb(10, 11-i)
					} else if b[284+i] == 51 {
						bv4 += 3 * powb(10, 11-i)
					} else if b[284+i] == 52 {
						bv4 += 4 * powb(10, 11-i)
					} else if b[284+i] == 53 {
						bv4 += 5 * powb(10, 11-i)
					} else if b[284+i] == 54 {
						bv4 += 6 * powb(10, 11-i)
					} else if b[284+i] == 55 {
						bv4 += 7 * powb(10, 11-i)
					} else if b[284+i] == 56 {
						bv4 += 8 * powb(10, 11-i)
					} else if b[284+i] == 57 {
						bv4 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var sp4 int64
				sp4 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[297+i] == 49 {
						sp4 += powb(10, 9-n)
					} else if b[297+i] == 50 {
						sp4 += 2 * powb(10, 9-n)
					} else if b[297+i] == 51 {
						sp4 += 3 * powb(10, 9-n)
					} else if b[297+i] == 52 {
						sp4 += 4 * powb(10, 9-n)
					} else if b[297+i] == 53 {
						sp4 += 5 * powb(10, 9-n)
					} else if b[297+i] == 54 {
						sp4 += 6 * powb(10, 9-n)
					} else if b[297+i] == 55 {
						sp4 += 7 * powb(10, 9-n)
					} else if b[297+i] == 56 {
						sp4 += 8 * powb(10, 9-n)
					} else if b[297+i] == 57 {
						sp4 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var sv4 int64
				sv4 = 0
				for i := 0; i < 12; i++ {
					if b[309+i] == 49 {
						sv4 += powb(10, 11-i)
					} else if b[309+i] == 50 {
						sv4 += 2 * powb(10, 11-i)
					} else if b[309+i] == 51 {
						sv4 += 3 * powb(10, 11-i)
					} else if b[309+i] == 52 {
						sv4 += 4 * powb(10, 11-i)
					} else if b[309+i] == 53 {
						sv4 += 5 * powb(10, 11-i)
					} else if b[309+i] == 54 {
						sv4 += 6 * powb(10, 11-i)
					} else if b[309+i] == 55 {
						sv4 += 7 * powb(10, 11-i)
					} else if b[309+i] == 56 {
						sv4 += 8 * powb(10, 11-i)
					} else if b[309+i] == 57 {
						sv4 += 9 * powb(10, 11-i)
					} else {
					}
				}
				var bp5 int64
				bp5 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[322+i] == 49 {
						bp5 += powb(10, 9-n)
					} else if b[322+i] == 50 {
						bp5 += 2 * powb(10, 9-n)
					} else if b[322+i] == 51 {
						bp5 += 3 * powb(10, 9-n)
					} else if b[322+i] == 52 {
						bp5 += 4 * powb(10, 9-n)
					} else if b[322+i] == 53 {
						bp5 += 5 * powb(10, 9-n)
					} else if b[322+i] == 54 {
						bp5 += 6 * powb(10, 9-n)
					} else if b[322+i] == 55 {
						bp5 += 7 * powb(10, 9-n)
					} else if b[322+i] == 56 {
						bp5 += 8 * powb(10, 9-n)
					} else if b[322+i] == 57 {
						bp5 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var bv5 int64
				bv5 = 0
				for i := 0; i < 12; i++ {
					if b[334+i] == 49 {
						bv5 += powb(10, 11-i)
					} else if b[334+i] == 50 {
						bv5 += 2 * powb(10, 11-i)
					} else if b[334+i] == 51 {
						bv5 += 3 * powb(10, 11-i)
					} else if b[334+i] == 52 {
						bv5 += 4 * powb(10, 11-i)
					} else if b[334+i] == 53 {
						bv5 += 5 * powb(10, 11-i)
					} else if b[334+i] == 54 {
						bv5 += 6 * powb(10, 11-i)
					} else if b[334+i] == 55 {
						bv5 += 7 * powb(10, 11-i)
					} else if b[334+i] == 56 {
						bv5 += 8 * powb(10, 11-i)
					} else if b[334+i] == 57 {
						bv5 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var sp5 int64
				sp5 = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[347+i] == 49 {
						sp5 += powb(10, 9-n)
					} else if b[347+i] == 50 {
						sp5 += 2 * powb(10, 9-n)
					} else if b[347+i] == 51 {
						sp5 += 3 * powb(10, 9-n)
					} else if b[347+i] == 52 {
						sp5 += 4 * powb(10, 9-n)
					} else if b[347+i] == 53 {
						sp5 += 5 * powb(10, 9-n)
					} else if b[347+i] == 54 {
						sp5 += 6 * powb(10, 9-n)
					} else if b[347+i] == 55 {
						sp5 += 7 * powb(10, 9-n)
					} else if b[347+i] == 56 {
						sp5 += 8 * powb(10, 9-n)
					} else if b[347+i] == 57 {
						sp5 += 9 * powb(10, 9-n)
					} else {
					}
				}

				var sv5 int64
				sv5 = 0
				for i := 0; i < 12; i++ {
					if b[359+i] == 49 {
						sv5 += powb(10, 11-i)
					} else if b[359+i] == 50 {
						sv5 += 2 * powb(10, 11-i)
					} else if b[359+i] == 51 {
						sv5 += 3 * powb(10, 11-i)
					} else if b[359+i] == 52 {
						sv5 += 4 * powb(10, 11-i)
					} else if b[359+i] == 53 {
						sv5 += 5 * powb(10, 11-i)
					} else if b[359+i] == 54 {
						sv5 += 6 * powb(10, 11-i)
					} else if b[359+i] == 55 {
						sv5 += 7 * powb(10, 11-i)
					} else if b[359+i] == 56 {
						sv5 += 8 * powb(10, 11-i)
					} else if b[359+i] == 57 {
						sv5 += 9 * powb(10, 11-i)
					} else {
					}
				}

				var precloseiopv int64
				precloseiopv = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[372+i] == 49 {
						precloseiopv += powb(10, 9-n)
					} else if b[372+i] == 50 {
						precloseiopv += 2 * powb(10, 9-n)
					} else if b[372+i] == 51 {
						precloseiopv += 3 * powb(10, 9-n)
					} else if b[372+i] == 52 {
						precloseiopv += 4 * powb(10, 9-n)
					} else if b[372+i] == 53 {
						precloseiopv += 5 * powb(10, 9-n)
					} else if b[372+i] == 54 {
						precloseiopv += 6 * powb(10, 9-n)
					} else if b[372+i] == 55 {
						precloseiopv += 7 * powb(10, 9-n)
					} else if b[372+i] == 56 {
						precloseiopv += 8 * powb(10, 9-n)
					} else if b[372+i] == 57 {
						precloseiopv += 9 * powb(10, 9-n)
					} else {
					}
				}

				var iopv int64
				iopv = 0
				for i := 0; i < 11; i++ {
					n := 0
					if i == 7 {
						continue
					} else if i > 7 {
						n = i - 1
					} else {
						n = i
					}

					if b[384+i] == 49 {
						iopv += powb(10, 9-n)
					} else if b[384+i] == 50 {
						iopv += 2 * powb(10, 9-n)
					} else if b[384+i] == 51 {
						iopv += 3 * powb(10, 9-n)
					} else if b[384+i] == 52 {
						iopv += 4 * powb(10, 9-n)
					} else if b[384+i] == 53 {
						iopv += 5 * powb(10, 9-n)
					} else if b[384+i] == 54 {
						iopv += 6 * powb(10, 9-n)
					} else if b[384+i] == 55 {
						iopv += 7 * powb(10, 9-n)
					} else if b[384+i] == 56 {
						iopv += 8 * powb(10, 9-n)
					} else if b[384+i] == 57 {
						iopv += 9 * powb(10, 9-n)
					} else {
					}
				}

				status1 := b[396]

				var status2 int64
				status2 = 0
				for i := 0; i < 3; i++ {
					if b[397+i] == 49 {
						status2 += powb(10, 2-i)
					} else {
					}
				}
				timestamp := make([]byte, 12)
				//copy(timestamp, b[405:417])
				copy(timestamp, b[405:])

				debug := false
				temp := string(timestamp)
				if debug {
					fmt.Printf("\n---[code|%v] [volume|%d] [amount|%d] [lastprice|%d]", code, volume, amount, lastprice)
					fmt.Printf(" [open|%d] [high|%d] [low|%d] [tradeprice|%d] [closepx|%d]", open, high, low, tradeprice, closepx)
					fmt.Printf(" [bp1|%d] [bv1|%d] [sp1|%d] [sv1|%d]", bp1, bv1, sp1, sv1)
					fmt.Printf(" [bp2|%d] [bv2|%d] [sp2|%d] [sv2|%d]", bp2, bv2, sp2, sv2)
					fmt.Printf(" [bp3|%d] [bv3|%d] [sp3|%d] [sv3|%d]", bp3, bv3, sp3, sv3)
					fmt.Printf(" [bp4|%d] [bv4|%d] [sp4|%d] [sv4|%d]", bp4, bv4, sp4, sv4)
					fmt.Printf(" [bp5|%d] [bv5|%d] [sp5|%d] [sv5|%d]", bp5, bv5, sp5, sv5)
					fmt.Printf(" [precloseiopv|%d] [iopv|%d]", precloseiopv, iopv)
					fmt.Printf(" [status1|%v] [status2|%d]", status1, status2)
					fmt.Printf(" [timestamp|%s]", temp)
					fmt.Println("---")
				}

				l := 1 + 6 + 2 + 1 + 2 + 2 + 12

				x := volume
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = amount
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = lastprice
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = open
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = high
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = low
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = tradeprice
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = closepx
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bp1
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bv1
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sp1
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sv1
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bp2
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bv2
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sp2
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sv2
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bp3
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bv3
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sp3
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sv3
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bp4
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bv4
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sp4
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sv4
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bp5
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = bv5
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sp5
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = sv5
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = precloseiopv
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				x = iopv
				for x >= 0x80 {
					x >>= 7
					l++
				}
				l += 2

				l += 2

				data := make([]byte, l)
				j := 0

				//code
				data[j] = 0
				j++
				data[j] = 6
				j++
				to := j + 6
				copy(data[j:], code)
				j = to

				//volume
				x = volume
				data[j] = 1
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//amount
				x = amount
				data[j] = 2
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//lastprice
				x = lastprice
				data[j] = 3
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//open
				x = open
				data[j] = 4
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//high
				x = high
				data[j] = 5
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//low
				x = low
				data[j] = 6
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//tradeprice
				x = tradeprice
				data[j] = 7
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//closepx
				x = closepx
				data[j] = 8
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bp1
				x = bp1
				data[j] = 9
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bv1
				x = bv1
				data[j] = 10
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++

				}
				data[j] = byte(x)
				j++

				//sp1
				x = sp1
				data[j] = 11
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sv1
				x = sv1
				data[j] = 12
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++

				}
				data[j] = byte(x)
				j++

				//bp2
				x = bp2
				data[j] = 13
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bv2
				x = bv2
				data[j] = 14
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sp2
				x = sp2
				data[j] = 15
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sv2
				x = sv2
				data[j] = 16
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bp3
				x = bp3
				data[j] = 17
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bv3
				x = bv3
				data[j] = 18
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sp3
				x = sp3
				data[j] = 19
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sv3
				x = sv3
				data[j] = 20
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bp4
				x = bp4
				data[j] = 21
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bv4
				x = bv4
				data[j] = 22
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sp4
				x = sp4
				data[j] = 23
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sv4
				x = sv4
				data[j] = 24
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bp5
				x = bp5
				data[j] = 25
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//bv5
				x = bv5
				data[j] = 26
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sp5
				x = sp5
				data[j] = 27
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//sv5
				x = sv5
				data[j] = 28
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//precloseiopv
				x = precloseiopv
				data[j] = 29
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//iopv
				x = iopv
				data[j] = 30
				j++
				for n := 0; x >= 0x80 && n < 8; n++ {
					data[j] = byte(x | 0x80)
					x >>= 7
					j++
				}
				data[j] = byte(x)
				j++

				//status1
				data[j] = 31
				j++
				data[j] = 1
				j++
				to = j + 1
				data[j] = status1
				j = to
				//status2
				x = status2
				data[j] = 32
				j++
				data[j] = byte(x)
				j++

				data[j] = 33
				j++
				data[j] = 12
				j++
				to = j + 12
				copy(data[j:], timestamp)
				j = to

				data[j] = 0x7f
				o := &Md004struct{}
				if err := o.UnmarshalBinary(data); err != nil {
					panic(err)
				}
				debug = false
				if debug {
					fmt.Printf("\n!!![code|%v] [volume|%d] [amount|%d] [lastprice|%d]", o.Code, o.Volume, o.Amount, o.Lastprice)
					fmt.Printf(" [open|%d] [high|%d] [low|%d] [tradeprice|%d] [closepx|%d]", o.Open, o.High, o.Low, o.Tradeprice, o.Closepx)
					fmt.Printf(" [bp1|%d] [bv1|%d] [sp1|%d] [sv1|%d]", o.Bp1, o.Bv1, o.Sp1, o.Sv1)
					fmt.Printf(" [bp2|%d] [bv2|%d] [sp2|%d] [sv2|%d]", o.Bp2, o.Bv2, o.Sp2, o.Sv2)
					fmt.Printf(" [bp3|%d] [bv3|%d] [sp3|%d] [sv3|%d]", o.Bp3, o.Bv3, o.Sp3, o.Sv3)
					fmt.Printf(" [bp4|%d] [bv4|%d] [sp4|%d] [sv4|%d]", o.Bp4, o.Bv4, o.Sp4, o.Sv4)
					fmt.Printf(" [bp5|%d] [bv5|%d] [sp5|%d] [sv5|%d]", o.Bp5, o.Bv5, o.Sp5, o.Sv5)
					fmt.Printf(" [precloseiopv|%d] [iopv|%d]", o.Precloseiopv, o.Iopv)
					fmt.Printf(" [status1|%v] [status2|%d]", o.Status1, o.Status2)
					fmt.Printf(" [timestamp|%v]", o.Timestamp)
					fmt.Printf("!!!\n")
				}

				if count == 10 {
					ct2 := time.Now().Sub(tt1)
					fmt.Printf("%d %d %v\n", seq, count, ct2)
				}
				rbreduce.Put(data)
			}

		}(i)
	}
}

func md004reduce() {
	for {
		msg, _ := rbmd004notify.Get()
		sum := msg.(int)
		fmt.Printf("sum: %d\n", sum)
		l := sum * 512
		senddata := make([]byte, l)
		senddata[0] = 4
		alllen := 1
		for {
			if sum > 0 {
				data, _ := rbmd004reduce.Get()
				b := data.([]byte)
				datalen := len(b)
				copy(senddata[alllen:alllen+datalen], b)
				alllen += datalen
				//				senddata[alllen] = 0x7F
				//				alllen++
				sum--
			} else {
				break
			}
		}
		//alllen++
		senddata[alllen] = 0x15
		alllen++
		tosenddata := make([]byte, alllen)
		copy(tosenddata, senddata[0:alllen])
		rbreduce.Put(tosenddata)
		ctstart := time.Now().Sub(tstart)
		fmt.Printf("cost Time %s\n", ctstart)
	}
}

func sendzmq() {
	//fmt.Printf("pub...\n")
	log.Info("start sendzmq...")
	
	publisher, _ := zmq.NewSocket(zmq.PUB)
	defer publisher.Close()
	publisher.Bind(Conf.ZmqBind)
	//Ensure subscriber connection has time to complete
	time.Sleep(time.Second)
	
	i := 1
	for {
		msg, _ := rbreduce.Get()
		b := msg.([]byte)
		topic := string(b[2:8]) + ".sh"
//		fmt.Printf("send %d, len %d, topic %s\n", i, len(b), topic)
		log.Info("send %d, len %d, topic %s", i, len(b), topic)
		
		_, err := publisher.SendMessage(topic, b)
		if err != nil {
			//fmt.Println(err)
			log.Error("publisher sendMessage: ", err)
		}
		
		i++
	}
}

func main() {

	flag.Parse()
	if err := InitConfig(); err != nil {
		panic(err)
	}
	log.LoadConfiguration(Conf.Log)
	defer log.Close()
	log.Info("readSH[%s] start", VERSION)
	
	var wg sync.WaitGroup
	wg.Add(1)
	rbmd001map = queue.NewRingBuffer(2000)
	rbmd002map = queue.NewRingBuffer(2000)
	rbmd004map = queue.NewRingBuffer(2000)
	//rbmd001reduce = queue.NewRingBuffer(2000)
	//rbmd002reduce = queue.NewRingBuffer(2000)
	//rbmd004reduce = queue.NewRingBuffer(2000)
	rbreduce = queue.NewRingBuffer(6000)
	//rbmd001notify = queue.NewRingBuffer(10)
	//rbmd002notify = queue.NewRingBuffer(10)
	//rbmd004notify = queue.NewRingBuffer(10)
	hashValueMap = make(map[string]uint32)
	
	//start := time.Now()
	go readfile()
	//t1 := time.Now()
	//fmt.Printf("4 Cost time %v\n", t1.Sub(start))
	time.Sleep(2 * time.Second)
	go md001map()
	//go md001reduce()
	go md002map()
	//go md002reduce()
	go md004map()
	//go md004reduce()
	go sendzmq()
	wg.Wait()

}
