//
//  Pathological subscriber
//  Subscribes to one random topic and prints received messages
//

package main

import (
	zmq "github.com/pebbe/zmq3"
	"github.com/vmihailenco/msgpack"
	hqbase "quant/hqserver/base"
	"fmt"
	"math/rand"
	"time"
)


func main() {
	subscriber, _ := zmq.NewSocket(zmq.SUB)
	subscriber.Connect("tcp://10.2.122.24:6666")
	
	rand.Seed(time.Now().UnixNano())

	subscription := ""
	subscriber.SetSubscribe(subscription)
	fmt.Println(fmt.Sprintf("subscription topic is: %s ", subscription))

	for i :=0; true; i++ {
		msg, err := subscriber.RecvMessage(0)
		if err != nil {
			break
		}
		topic := msg[0]
		data := msg[1]
//		if topic != subscription {
//			panic("topic != subscription")
//		}
		fmt.Println(fmt.Sprintf("index: %d, topic: %s, msg: %s", i, topic, data))
		
		var mkdat hqbase.Marketdata
		err = msgpack.Unmarshal([]byte(data), &mkdat)
		fmt.Printf("%+v\n", mkdat)
	}
}
