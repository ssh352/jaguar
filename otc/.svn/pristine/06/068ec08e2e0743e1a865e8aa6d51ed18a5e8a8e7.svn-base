package main

import (
	"github.com/Workiva/go-datastructures/queue"
	zmq "github.com/pebbe/zmq3"
	log "github.com/thinkboy/log4go"
	"github.com/vmihailenco/msgpack"
	"github.com/widuu/goini"
	"os"
	"quant/emsmodule/emsbase"
	"quant/helper"
)

func init() {
	log.LoadConfiguration(helper.QuantLogConfigFile)
}

type omsmodule struct {
	pullAddr    string
	publishAddr string
	reqAddr     string
	pull        *zmq.Socket
	conf        *goini.Config
	entrustPush *queue.RingBuffer
	tradePush   *queue.RingBuffer
	running     bool
	worker      *dbworker
}

func (oms *omsmodule) init() {
	oms.conf = goini.SetConfig(helper.QuantConfigFile)
	oms.pullAddr = oms.conf.GetStr(helper.ConfigOMSSessionName, helper.ConfigOMSPullAddr)
	oms.publishAddr = oms.conf.GetStr(helper.ConfigOMSSessionName, helper.ConfigOMSPublishAddr)
	oms.reqAddr = oms.conf.GetStr(helper.ConfigOMSSessionName, helper.ConfigOMSReqAddr)
	oms.entrustPush = queue.NewRingBuffer(uint64(oms.conf.GetInt(helper.ConfigOMSSessionName, helper.ConfigOMSEntrustLen)))
	oms.tradePush = queue.NewRingBuffer(uint64(oms.conf.GetInt(helper.ConfigOMSSessionName, helper.ConfigOMSTradeLen)))
	oms.worker = &dbworker{entrustPush: oms.entrustPush, tradePush: oms.tradePush}
	oms.worker.init()
	go oms.worker.updateEntrust()
	go oms.worker.insertTrade()
	go oms.worker.updateEntrustByTrade()

	oms.listenOrder()
	oms.running = false
}

func (oms *omsmodule) listenOrder() {
	log.Info("OMS listen to: %s", oms.pullAddr)
	var err error
	oms.pull, err = zmq.NewSocket(zmq.PULL)
	if err != nil {
		log.Error("OMS create pull fail.")
		os.Exit(-1)
	}
	err = oms.pull.Bind(oms.pullAddr)
	if err != nil {
		log.Error("OMS bind to %s fail.", oms.publishAddr)
		os.Exit(-1)
	}
}

func (oms *omsmodule) Stop() {
	oms.running = false
}

func (oms *omsmodule) pullOrderResp(wc chan int) {
	oms.running = true
	for oms.running {
		data, _ := oms.pull.Recv(0)
		var pushdata emsbase.PushData
		err := msgpack.Unmarshal([]byte(data), &pushdata)
		if err != nil {
			log.Error("OMS unmarshal push data fail: ", err)
		} else {
			if pushdata.MsgType == "ENTRUST" {
				oms.entrustPush.Put(pushdata.Entrust)
			} else if pushdata.MsgType == "TRADE" {
				oms.tradePush.Put(pushdata.Trade)
			}
		}
	}
	wc <- 1
}

func main() {
	oms := omsmodule{}
	oms.init()

	chs := make([]chan int, 3)
	for i := 0; i < 3; i++ {
		chs[i] = make(chan int)
	}
	go oms.pullOrderResp(chs[0])

	for _, ch := range chs {
		<-ch
	}
}
