package sbase

import (
	"strings"
	"log"
	"fmt"
	zmq "github.com/pebbe/zmq3"
	"github.com/widuu/goini"
	hqbase "quant/hqserver/base"
	"github.com/vmihailenco/msgpack"
)

type Sbase struct {
	StrategyName  string
	StockAccount  string
	FutureAccount string
	CombiNo       string
	SubQuoteCodes string //subscribe qoute id, example 000001.SZ|600000.SH
	SubQuoteCodesArr []string //subscribe qoute id, example arr[0] = 000001.SZ, arr[1] = 600000.SH

	*log.Logger
	HqModulePublishAddr  string //zmq pub/sub
	OMSModulePublishAddr string //zmq pub/sub
	OMSModuleQueryAddr   string //zmq req/rep
	EMSModuleAddr        string //zmq pull/push

	HqModuleSub   *zmq.Socket
	OmsModuleSub  *zmq.Socket
	OmsModuleRep  *zmq.Socket
	EmsModulePush *zmq.Socket
}

func (sb *Sbase) Init(){
	sb.InitConfig()
	sb.SubQuote()
	sb.SetSubQuote()
	sb.ConnectToEMS()
	sb.SubResp()
	sb.ConnectToOMS()
}

func (sb *Sbase) InitConfig() {
 	conf := goini.SetConfig("./conf/quant.ini")
	sb.HqModulePublishAddr = conf.GetValue("hqmodule", "publish_addr")
	sb.OMSModulePublishAddr = conf.GetValue("omsmodule", "publish_addr")
	sb.OMSModuleQueryAddr = conf.GetValue("omsmodule", "req_addr")
	sb.EMSModuleAddr = conf.GetValue("emsmodule", "pull_addr")
}

func (sb *Sbase) SetSubQuote(){
	sb.SubQuoteCodesArr = strings.Split(sb.SubQuoteCodes, "|")
	for _, filter := range sb.SubQuoteCodesArr {
		fmt.Printf("%s\n", filter)
		sb.HqModuleSub.SetSubscribe(filter)
	}
}

func (sb *Sbase) SubQuote(){
	sb.HqModuleSub, _ = zmq.NewSocket(zmq.SUB)
	sb.HqModuleSub.Connect(sb.HqModulePublishAddr)
}

func (sb *Sbase) ConnectToEMS(){
	sb.EmsModulePush, _ = zmq.NewSocket(zmq.PUSH)
    sb.EmsModulePush.Connect(sb.EMSModuleAddr)
}

func (sb *Sbase) SubResp(){
	sb.OmsModuleSub, _ = zmq.NewSocket(zmq.SUB)
	sb.OmsModuleSub.Connect(sb.OMSModulePublishAddr)
}

func (sb *Sbase) ConnectToOMS(){
	sb.OmsModuleRep, _ = zmq.NewSocket(zmq.REQ)
	sb.OmsModuleRep.Connect(sb.OMSModuleQueryAddr)
}


func (sb *Sbase) Run(waitchan chan int){
	for i :=0; true; i++ {
		msg, err := sb.HqModuleSub.RecvMessage(0)
		if err != nil {
			fmt.Printf("%s\n", err)
			break
		}
		break
//		topic := msg[0]
		data := msg[1]
//		fmt.Printf("index: %d, topic:%s, msg: %s\n", i, topic, data)
		
		var mkdat hqbase.Marketdata
		err = msgpack.Unmarshal([]byte(data), &mkdat)
		fmt.Printf("%+v\n", mkdat)
	}
	sb.Release()
	fmt.Printf("before write waitchan\n")
	waitchan <- 0
	fmt.Printf("after write waitchan\n")
}

func (sb *Sbase) Release(){
	defer sb.HqModuleSub.Close()
	defer sb.EmsModulePush.Close()
	defer sb.OmsModuleSub.Close()
	defer sb.OmsModuleRep.Close()	
}





