package main

import (
	"flag"
	"runtime"

	"github.com/Terry-Mao/goconf"
)

var (
	gconf    *goconf.Config
	Conf     *Config
	confFile string
)

func init() {
	flag.StringVar(&confFile, "c", "./readSH.conf", " set readSH config file path")
}

type Config struct {
	// base section
	PidFile  string `goconf:"base:pidfile"`
	Dir      string `goconf:"base:dir"`
	Log      string `goconf:"base:log"`
	MaxProc  int    `goconf:"base:maxproc"`
	FileName string `goconf:"base:filename"`
	ZmqBind  string `goconf:"base:zmq.bind"`
	ReadFileInterval int `goconf:"base:readfileinterval"`
}

func NewConfig() *Config {
	return &Config{
		// base section
		PidFile: "/tmp/goim-readSH.pid",
		Dir:     "./",
		Log:     "./readSH-log.xml",
		MaxProc: runtime.NumCPU(),
	}
}

// InitConfig init the global config.
func InitConfig() (err error) {
	Conf = NewConfig()
	gconf = goconf.New()
	if err = gconf.Parse(confFile); err != nil {
		return err
	}
	if err := gconf.Unmarshal(Conf); err != nil {
		return err
	}
	return nil
}

func ReloadConfig() (*Config, error) {
	conf := NewConfig()
	ngconf, err := gconf.Reload()
	if err != nil {
		return nil, err
	}
	if err := ngconf.Unmarshal(conf); err != nil {
		return nil, err
	}
	gconf = ngconf
	return conf, nil
}
