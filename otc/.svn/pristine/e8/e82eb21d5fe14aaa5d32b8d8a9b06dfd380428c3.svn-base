package com.gf.otc.neeq.common.ufx;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.hundsun.mcapi.interfaces.ISubscriber;
import com.hundsun.mcapi.subscribe.MCSubscribeParameter;
import com.hundsun.t2sdk.common.core.context.ContextUtil;
import com.hundsun.t2sdk.common.share.dataset.DatasetService;
import com.hundsun.t2sdk.impl.client.T2Services;
import com.hundsun.t2sdk.interfaces.IClient;
import com.hundsun.t2sdk.interfaces.T2SDKException;
import com.hundsun.t2sdk.interfaces.share.dataset.IDataset;
import com.hundsun.t2sdk.interfaces.share.dataset.IDatasets;
import com.hundsun.t2sdk.interfaces.share.event.EventReturnCode;
import com.hundsun.t2sdk.interfaces.share.event.EventType;
import com.hundsun.t2sdk.interfaces.share.event.IEvent;

public class UfxServiceImplBak {

	private IClient client = null;
	private T2Services server = T2Services.getInstance();
	private int TIMEOUT = 10000;
	private int subscribeid;
	private ISubscriber subscriber;
	
	//获取实例
	/*public static UfxServiceImpl getSingleton() {  
	    if (instance == null) {  
	        synchronized (UfxServiceImpl.class) {  
		        if (instance == null) {  
		        	instance = new UfxServiceImpl();  
		        	try{
		        		instance.connect();
		        	}catch(Exception e){
		        		e.printStackTrace();
		        	}
		        }  
	        }  
	    }  
	    return instance;
	}*/
	
	public UfxServiceImplBak(){
		try{
    		this.connect();
    	}catch(Exception e){
    		e.printStackTrace();
    	}
	}
	
	public static void PrintMsg(IDatasets result) {
		StringBuilder sb = new StringBuilder();
		int datasetCount = result.getDatasetCount();
		// 遍历所有的结果集
		for (int i = 0; i < datasetCount; i++) {
			sb.append("===============================================\n");
			// 开始读取单个结果集的信息
			IDataset ds = result.getDataset(i);
			int columnCount = ds.getColumnCount();
			// 遍历单个结果集列信息
			for (int j = 1; j <= columnCount; j++) {
				sb.append(String.format("%20s", ds.getColumnName(j)));
				sb.append("|");
			}
			sb.append("\n");
			// 遍历单个结果集记录，遍历前首先将指针置到开始
			ds.beforeFirst();
			while (ds.hasNext()) {
				sb.append("\n");
				ds.next();
				for (int j = 1; j <= columnCount; j++) {
					sb.append(String.format("%20s", ds.getString(j)));
					sb.append("|");
				}
			}
		}
		sb.append("\n");
		System.out.println(sb.toString());
	}
	
	/**
	 * 链接后台 订阅主推消息
	 * 
	 * @throws Exception
	 */
	private void connect() throws Exception {
		//logger.info("链接后台服务 订阅主推消息");
		server.init();
		server.start();
		client = server.getClient("as_ufx");

		//MCServers.MCInit();
		//subscriber = MCServers.GetSubscriber();
		MCSubscribeParameter subParam = new MCSubscribeParameter();
		subParam.SetTopicName("ufx_topic"); // ufx成交回报固定主题
		subParam.SetFromNow(true);
		subParam.SetReplace(false);
		subParam.SetFilter("operator_no", ConfigProperties.OPERATOR_NO);
		//subscribeid = subscriber.SubscribeTopic(subParam, 3000);
		//if (subscribeid < 0) {
		//	throw new Exception("订阅主题失败 ret[" + subscribeid + "]");
		//}
	}

	/**
	 * 取消订阅 断开链接
	 * 
	 * @throws Exception
	 */
	private void disConnect() throws Exception {
		//logger.info("后台链接断开");
		//int ret = subscriber.CancelSubscribeTopic(subscribeid);
		//if (ret < 0) {
		//	throw new Exception("取消订阅主题失败 ret[" + ret + "]");
		//}
		//MCServers.Destroy();
		server.stop();
	}

	/**
	 * 登陆
	 * 调用功能号10001
	 * @param operator_no 操作员号
	 * @param password 密码
	 * @return 用户token
	 */
	public String login(String operator_no, String password) throws Exception {
		String user_token = null;
		
		//封装数据
		IDataset dataset = DatasetService.getDefaultInstance().getDataset();
		dataset.addColumn("operator_no");
		dataset.addColumn("password");
		dataset.addColumn("mac_address");
		dataset.addColumn("op_station");
		dataset.addColumn("ip_address");
		dataset.addColumn("authorization_id");
		dataset.addColumn("login_time");
		dataset.addColumn("verification_code");
		dataset.appendRow();
		dataset.updateString("operator_no", operator_no);
		dataset.updateString("password", password);
		dataset.updateString("mac_address", ConfigProperties.MAC_ADDRESS);
		dataset.updateString("op_station", ConfigProperties.OP_STATION);
		dataset.updateString("ip_address", ConfigProperties.IP_ADDRESS);
		dataset.updateString("authorization_id", "");
		dataset.updateString("login_time", "");
		dataset.updateString("verification_code", "");
		
		//调用功能号
		IDatasets result = CallSerivce(10001, dataset);
		
		//解析返回结果
		IDataset head = result.getDataset(0);
		int errCode = head.getInt("ErrCode");
		if (errCode != 0) {
			throw new Exception(head.getString("ErrMsg"));
		} else {
			if (head.getInt("DataCount") != 0) {
				IDataset biz = result.getDataset(1);
				user_token = biz.getString("user_token");
			}
		}
		
		return user_token;
	}
	
	/**
	 * 登出
	 * 调用功能号10002
	 * @param user_token 令牌号
	 */
	public void logout(String user_token) throws Exception {
		
		//封装数据
		IDataset dataset = DatasetService.getDefaultInstance().getDataset();
		dataset.addColumn("user_token");
		
		dataset.appendRow();
		dataset.updateString("user_token", user_token);
		
		//调用功能号
		IDatasets result = CallSerivce(10002, dataset);
		
		//解析返回结果
		IDataset head = result.getDataset(0);
		int errCode = head.getInt("ErrCode");
		if (errCode != 0) {
			throw new Exception(head.getString("ErrMsg"));
		} 
	}
	
	/**
	 * 委托
	 * 调用功能号91011
	 * @param user_token 令牌号
	 * @param account_code 账户编号
	 * @param stock_code 股票代码
	 * @param buy_price 买入价格
	 * @param buy_amount 买入数量
	 * @param sell_price 卖出价格
	 * @param sell_amount 卖出数量
	 * @return
	 * @throws Exception
	 */
	public IDatasets entrust(String user_token, String account_code, String stock_code, String buy_price, String buy_amount, String sell_price, String sell_amount) throws Exception {
				
		//封装数据
		IDataset dataset = DatasetService.getDefaultInstance().getDataset();
		dataset.addColumn("user_token");
		dataset.addColumn("account_code");
		dataset.addColumn("asset_no");
		dataset.addColumn("combi_no");
		dataset.addColumn("stockholder_id");
		dataset.addColumn("report_seat");
		dataset.addColumn("stock_code");
		dataset.addColumn("buy_price");
		dataset.addColumn("buy_amount");
		dataset.addColumn("sell_price");
		dataset.addColumn("sell_amount");
		dataset.addColumn("third_reff");

		dataset.appendRow();
		dataset.updateString("user_token", user_token);
		dataset.updateString("account_code", account_code);
		dataset.updateString("asset_no", "");
		dataset.updateString("combi_no", "");
		dataset.updateString("stockholder_id", "");
		dataset.updateString("report_seat", "");
		dataset.updateString("stock_code", stock_code);
		dataset.updateString("buy_price", buy_price);
		dataset.updateString("buy_amount", buy_amount);
		dataset.updateString("sell_price", sell_price);
		dataset.updateString("sell_amount", sell_amount);
		dataset.updateString("third_reff", ConfigProperties.THIRD_REFF);
		
		//调用功能号
		IDatasets result = CallSerivce(91011, dataset);
		
		//解析返回结果
		IDataset head = result.getDataset(0);
		int errCode = head.getInt("ErrCode");
		if (errCode != 0) {
			throw new Exception(head.getString("ErrMsg"));
		} 
		
		return result;
	}
	
	/**
	 * 撤单
	 * 调用功能号91102
	 * @param user_token 令牌号
	 * @param batch_no 委托批号
	 * @return
	 * @throws Exception
	 */
	public IDatasets withdraw(String user_token, String batch_no) throws Exception {
		//封装数据
		IDataset dataset = DatasetService.getDefaultInstance().getDataset();
		dataset.addColumn("user_token");
		dataset.addColumn("batch_no");

		dataset.appendRow();
		dataset.updateString("user_token", user_token);
		dataset.updateString("batch_no", batch_no);

		//调用功能号
		IDatasets result = CallSerivce(91102, dataset);
		
		//解析返回结果
		IDataset head = result.getDataset(0);
		int errCode = head.getInt("ErrCode");
		if (errCode != 0) {
			throw new Exception(head.getString("ErrMsg"));
		} 
		
		return result;
	}
	
	/**
	 * 委托查询
	 * 调用功能号32006
	 * @param user_token 令牌号
	 * @param batch_no 委托批号
	 * @param account_code 账户编号
	 * @param asset_no 资产单元编号
	 * @param combi_no 组合编号
	 * @param stockholder_id 股东代码
	 * @param stock_code 证券代码
	 * @param entrust_state_list 委托状态
	 * @return
	 * @throws Exception
	 */
	public List<Map<String, String>> queryEntrust(String user_token, String batch_no, String account_code, String asset_no, String combi_no, String stockholder_id, String stock_code, String entrust_state_list) throws Exception{
		//封装数据
		IDataset dataset = DatasetService.getDefaultInstance().getDataset();
		dataset.addColumn("user_token");
		dataset.addColumn("batch_no");
		dataset.addColumn("account_code");
		dataset.addColumn("asset_no");
		dataset.addColumn("combi_no");
		dataset.addColumn("stockholder_id");
		dataset.addColumn("stock_code");
		dataset.addColumn("entrust_state_list");
		dataset.addColumn("third_reff");

		dataset.appendRow();
		dataset.updateString("user_token", user_token);
		dataset.updateString("batch_no", batch_no);
		dataset.updateString("account_code", account_code);
		dataset.updateString("asset_no", asset_no);
		dataset.updateString("combi_no", combi_no);
		dataset.updateString("stockholder_id", stockholder_id);
		dataset.updateString("stock_code", stock_code);
		dataset.updateString("entrust_state_list", entrust_state_list);
		dataset.updateString("third_reff", ConfigProperties.THIRD_REFF);
		
		//调用功能号
		IDatasets result = CallSerivce(32006, dataset);
		
		//解析返回结果
		IDataset head = result.getDataset(0);
		int errCode = head.getInt("ErrCode");
		if (errCode != 0) {
			throw new Exception(head.getString("ErrMsg"));
		} 
		
		//this.PrintMsg(result);
		return this.toList(result);
	}
	
	/**
	 * 成交查询
	 * 调用功能号33001
	 * @param user_token 令牌号
	 * @param account_code 账户编号
	 * @param asset_no 资产单元编号
	 * @param combi_no 组合编号
	 * @param entrust_no 委托序号
	 * @param deal_no 成交编号
	 * @param stockholder_id 股东代码
	 * @param stock_code 证券代码
	 * @param entrust_direction 委托方向
	 * @param extsystem_id 第三方系统自定义号
	 * @param position_str 定位串
	 * @param request_num 请求数
	 * @return
	 * @throws Exception
	 */
	public List<Map<String, String>> queryDeal(String user_token, String account_code, String asset_no, String combi_no, String entrust_no, String deal_no, String stockholder_id, String stock_code, String entrust_direction, String extsystem_id, String position_str, String request_num) throws Exception{
		//封装数据
		IDataset dataset = DatasetService.getDefaultInstance().getDataset();
		dataset.addColumn("user_token");
		dataset.addColumn("account_code");
		dataset.addColumn("asset_no");
		dataset.addColumn("combi_no");
		dataset.addColumn("entrust_no");
		dataset.addColumn("deal_no");
		dataset.addColumn("stockholder_id");
		dataset.addColumn("stock_code");
		dataset.addColumn("entrust_direction");
		dataset.addColumn("extsystem_id");
		dataset.addColumn("position_str");
		dataset.addColumn("request_num");

		dataset.appendRow();
		dataset.updateString("user_token", user_token);
		dataset.updateString("account_code", account_code);
		dataset.updateString("asset_no", asset_no);
		dataset.updateString("combi_no", combi_no);
		dataset.updateString("entrust_no", entrust_no);
		dataset.updateString("deal_no", deal_no);
		dataset.updateString("stockholder_id", stockholder_id);
		dataset.updateString("stock_code", stock_code);
		dataset.updateString("entrust_direction", entrust_direction);
		dataset.updateString("extsystem_id", extsystem_id);
		dataset.updateString("position_str", position_str);
		dataset.updateString("request_num", request_num);
		
		//调用功能号
		IDatasets result = CallSerivce(33001, dataset);
		
		//解析返回结果
		IDataset head = result.getDataset(0);
		int errCode = head.getInt("ErrCode");
		if (errCode != 0) {
			throw new Exception(head.getString("ErrMsg"));
		} 
		
		return this.toList(result);
	}
	
	/**
	 * 股票持仓查询
	 * @param user_token 令牌号
	 * @param account_code 账号编号
	 * @param asset_no 资产单元编号
	 * @param combi_no 组合编号
	 * @param stock_code 证券代码
	 * @param stockholder_id 股东代码
	 * @return
	 * @throws Exception
	 */
	public List<Map<String, String>> queryPosition(String user_token, String account_code, String asset_no, String combi_no, String stock_code, String stockholder_id) throws Exception{
		//封装数据
		IDataset dataset = DatasetService.getDefaultInstance().getDataset();
		dataset.addColumn("user_token");
		dataset.addColumn("account_code");
		dataset.addColumn("asset_no");
		dataset.addColumn("combi_no");
		dataset.addColumn("stock_code");
		dataset.addColumn("stockholder_id");

		dataset.appendRow();
		dataset.updateString("user_token", user_token);
		dataset.updateString("account_code", account_code);
		dataset.updateString("asset_no", asset_no);
		dataset.updateString("combi_no", combi_no);
		dataset.updateString("stock_code", stock_code);
		dataset.updateString("stockholder_id", stockholder_id);
		
		//调用功能号
		IDatasets result = CallSerivce(31001, dataset);
		
		//解析返回结果
		IDataset head = result.getDataset(0);
		int errCode = head.getInt("ErrCode");
		if (errCode != 0) {
			throw new Exception(head.getString("ErrMsg"));
		} 
		//this.PrintMsg(result);
		return this.toList(result);
	}
	
	//调用功能号========================================================
	/**
	 * 同步调用
	 * @param funcno
	 * @param dataset
	 * @return
	 * @throws T2SDKException
	 */
	private IDatasets CallSerivce(int funcno, IDataset dataset) throws T2SDKException {
		IDatasets result = null;

		try{
			IEvent event = ContextUtil.getServiceContext().getEventFactory().getEventByAlias(String.valueOf(funcno), EventType.ET_REQUEST);
			event.putEventData(dataset);
			IEvent rsp = client.sendReceive(event, TIMEOUT);
			// 先判断返回值
			if (rsp.getReturnCode() != EventReturnCode.I_OK) { // 返回错误
				throw new T2SDKException(rsp.getErrorNo(), rsp.getErrorInfo());
			} else {
				result = rsp.getEventDatas();
			}
		}catch(T2SDKException e){
			e.printStackTrace();
		}catch(Exception e){
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * 解析及封装功能号返回的IDatasets对象
	 * @param result
	 * @return
	 */
	private List<Map<String, String>> toList(IDatasets result){
		List list = new ArrayList<Map<String, String>>();
		Map<String, String> map;
		//获得结果集总数
		int datasetCount = result.getDatasetCount();
		
		IDataset ds;
		//遍历所有的结果集
		for (int i = 0; i < datasetCount; i++) {
			// 开始读取单个结果集的信息
			ds = result.getDataset(i);
			
			// 遍历单个结果集记录，遍历前首先将指针置到开始
			ds.beforeFirst();
			while (ds.hasNext()) {
				ds.next();
				//用map来封装 每个字段的数据
				map = new HashMap<String, String>();
				for (int j = 1; j <= ds.getColumnCount(); j++) {
					map.put(ds.getColumnName(j), ds.getString(j));
				}
				
				//用list封装每行数据
				list.add(map);
			}
		}
		
		return list;
	}
}
