package main

import (
	zmq "github.com/pebbe/zmq3"
	log "github.com/thinkboy/log4go"
	"github.com/vmihailenco/msgpack"
	"github.com/widuu/goini"
	"os"
	emsbase "quant/emsmodule/base"
)

func init() {
	log.LoadConfiguration("./conf/quant_log.xml")
}

type EmsModule struct {
	ReceiveAddr   string
	EmsModulePull *zmq.Socket
}

func (ems *EmsModule) Init() {
	conf := goini.SetConfig("./conf/quant.ini")
	ems.ReceiveAddr = conf.GetStr("emsmodule", "pull_addr")
	ems.connect()
}

func (ems *EmsModule) connect() {
	log.Info("EMS listen to %s", ems.ReceiveAddr)
	var err error
	ems.EmsModulePull, err = zmq.NewSocket(zmq.PULL)
	if err != nil {
		log.Error("EMS create zmq pull failed.")
		os.Exit(-1)
		return
	}
	err = ems.EmsModulePull.Bind(ems.ReceiveAddr)
	if err != nil {
		log.Error("EMS create zmq pull bind failed. Addr: %s", ems.ReceiveAddr)
		os.Exit(-1)
		return
	}
}

func (ems *EmsModule) Release() {
	ems.EmsModulePull.Close()
}

func (ems *EmsModule) Run(wc chan int) {
	for {
		data, _ := ems.EmsModulePull.Recv(0)
		var port emsbase.Portfolio
		err := msgpack.Unmarshal([]byte(data), &port)
		if err != nil {
			log.Error("EMS msgpack unmarshal portfolio failed.")
		} else {
			// arithmetic trade
			log.Info("%v", port)
		}
	}
	wc <- 0
}

func main() {
	log.Info("EMS Start")
	ems := new(EmsModule)
	ems.Init()
	wc := make(chan int)
	go ems.Run(wc)
	<-wc
	log.Info("EMS Exit")
}
