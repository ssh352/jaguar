package ufxapi

//#cgo CFLAGS:  -I E:/jaguar/sandbox/C++/ufxapi/ufxapi
//#include "response.h"
import "C"
import (
	log "github.com/thinkboy/log4go"
	"reflect"
	"unsafe"
)

// GoCallBackFunc will be called when UFX receive push data
//export GoCallBackFunc
func GoCallBackFunc(retptr unsafe.Pointer) {
	ret := (*C.struct_Result)(retptr)
	funcNo := int(ret.FuncNo)
	inputs := make([]reflect.Value, 1)
	inputs[0] = reflect.ValueOf(ret)

	if funcNo != -999999 {
		reflectFunc, ok := handleFuncMap[funcNo]
		if ok {
			reflectFunc.Call(inputs)
		} else {
			log.Info("Please register handle function first.[FuncID: %d]\n", funcNo)
		}
	} else {
		log.Info("PUSH MESSAGE")
		dat := ret.DataSet
		if C.GoString(ret.MsgType) == "g" {
			pushdata := (*C.struct_DealPushResp)(dat)
			log.Info("%+v", *pushdata)
			log.Info("MsgType: %s, third_reff: %s", C.GoString(ret.MsgType), C.GoString(pushdata.third_reff))
		} else {
			pushdata := (*C.struct_EntrustPushResp)(dat)
			log.Info("%+v", *pushdata)
			log.Info("MsgType: %s, third_reff: %s", C.GoString(ret.MsgType), C.GoString(pushdata.third_reff))
		}
	}
}
