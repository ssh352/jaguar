package main

import (
	log "github.com/thinkboy/log4go"
	"github.com/widuu/goini"
	"quant/emsmodule/emsbase"
	"quant/helper"
	"util/db"
)

const (
	updateEntrustSQL string = "update jqorder set operator_no = ?, business_date = ?, business_time = ?, entrust_no = ?, entrust_price = ?, entrust_status = ?, invest_type= ?, price_type = ?, report_no = ?, report_seat = ?, stockholder_id = ? where third_reff = ?"
	insertTradeSQL   string = "insert into jqtrade(account_code,batch_no,cancel_amount,combi_no,deal_amount,deal_balance,deal_date,deal_fee,deal_no,deal_price,deal_time,entrust_amount,entrust_direction,entrust_no,entrust_status,extsystem_id,futures_direction,market_no,operator_no,report_direction,report_seat,stock_code,stockholder_id,third_reff,total_deal_amount,total_deal_balance) " +
		"values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
)

type dbworker struct {
	dbop        *db.MysqlWorker
	conf        *goini.Config
	sqls        chan string
	entrustPush chan emsbase.EntrustPushResp
	tradePush   chan emsbase.DealPushResp
}

func (r *dbworker) init() {
	r.conf = goini.SetConfig(helper.QuantConfigFile)
	config := db.MysqlConfig{
		MysqlUsernName: r.conf.GetStr(helper.ConfigMysqlSessionName, helper.ConfigMysqlUserName),
		MysqlPwd:       r.conf.GetStr(helper.ConfigMysqlSessionName, helper.ConfigMysqlPwd),
		MysqlURL:       r.conf.GetStr(helper.ConfigMysqlSessionName, helper.ConfigMysqlUrl),
	}
	r.sqls = make(chan string, r.conf.GetInt(helper.ConfigEMSSessionName, helper.ConfigEMSSqlLen))
	r.dbop = &db.MysqlWorker{SQLs: r.sqls, MysqlConfig: &config}
	err := r.dbop.Init()
	if err != nil {
		log.Error("OMS connect to mysql fail. mysqlurl: %s. Error:%s.", r.dbop.MysqlURL, err.Error())
	} else {
		log.Info("OMS connect to %s mysql.", r.dbop.MysqlURL)
	}
}

func (r *dbworker) insertTrade() {
	for t := range r.tradePush {
		tx, err := r.dbop.DB.Begin()
		if err != nil {
			log.Error("OMS dbworker get context failed. Error: %s", err)
		} else {
			_, err := tx.Exec(insertTradeSQL, t.AccountCode, t.BatchNo, t.CancelAmount, t.CombiNo,
				t.DealAmount, t.DealBalance, t.DealDate, t.DealFee,
				t.DealNo, t.DealPrice, t.DealTime, t.EntrustAmount,
				t.EntrustDirection, t.EntrustNo, t.EntrustStatus,
				t.ExtsystemID, t.FuturesDirection, t.MarketNo, t.OperatorNo,
				t.ReportDirection, t.ReportSeat, t.StockCode, t.StockholderID,
				t.ThirdReff, t.TotalDealAmount, t.TotalDealBalance)
			if err != nil {
				log.Error("OMS dbworker exec fail. %s", err)
			}
			err = tx.Commit()
			if err != nil {
				log.Error("OMS dbworker commit fail. %s", err)
			}
		}
	}
}

func (r *dbworker) updateEntrust() {
	// go r.dbworker.Run()
	for e := range r.entrustPush {
		tx, err := r.dbop.DB.Begin()
		if err != nil {
			log.Error("OMS dbworker get context failed. Error: %s", err)
		} else {
			_, err := tx.Exec(updateEntrustSQL, e.OperatorNo, e.BusinessDate, e.BusinessTime, e.EntrustNo, e.EntrustPrice, e.EntrustStatus, e.InvestType, e.PriceType, e.ReportNo, e.ReportSeat, e.StockholderID, e.ThirdReff)
			if err != nil {
				log.Error("OMS dbworker exec fail. %s", err)
			}
			err = tx.Commit()
			if err != nil {
				log.Error("OMS dbworker commit fail. %s", err)
			}
		}
	}
}
